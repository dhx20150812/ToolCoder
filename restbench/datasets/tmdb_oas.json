[
    {
        "path": "/3/search/movie",
        "description": "Search for movies by their original, translated and alternative titles.",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "primary_release_year",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "year",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 550,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Fight Club"
                            },
                            "overview": {
                                "type": "string",
                                "example": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 73.433,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "1999-10-15"
                            },
                            "title": {
                                "type": "string",
                                "example": "Fight Club"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.433,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 26279,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 2,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 39,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg",
                    "genre_ids": [
                        18
                    ],
                    "id": 550,
                    "original_language": "en",
                    "original_title": "Fight Club",
                    "overview": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.",
                    "popularity": 73.433,
                    "poster_path": "/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg",
                    "release_date": "1999-10-15",
                    "title": "Fight Club",
                    "video": false,
                    "vote_average": 8.433,
                    "vote_count": 26279
                }
            ],
            "total_pages": 2,
            "total_results": 39
        },
        "code": "import requests\n\ndef search_movies(query, include_adult=False, language=\"en-US\", primary_release_year=None, page=1, region=None, year=None):\n    '''\n    Searches for movies based on the specified query and optional parameters.\n\n    Parameters:\n    - query (str): The search query for the movie. This is a required parameter.\n    - include_adult (bool): Whether to include adult content in the search results. Default is False.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - primary_release_year (str): Filter results by the primary release year.\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): Specify a region to filter the results.\n    - year (str): Filter results by a specific year.\n\n    Returns:\n    - dict: A JSON response containing the search results if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/search/movie\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"query\": query,\n        \"include_adult\": include_adult,\n        \"language\": language,\n        \"primary_release_year\": primary_release_year,\n        \"page\": page,\n        \"region\": region,\n        \"year\": year\n    }\n    # Remove parameters that are None\n    params = {k: v for k, v in params.items() if v is not None}\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Search for movies by their original, translated, and alternative titles. This API allows you to search for specific movies based on their titles. It is useful for finding movies of interest by their various titles.",
        "functionality": "This API searches for movies using a query string and returns a list of movie results along with pagination details, including their titles, IDs, release dates, and other relevant information."
    },
    {
        "path": "/3/discover/movie",
        "description": "Find movies using over 30 filters and sort options.",
        "parameters": [
            {
                "name": "certification",
                "in": "query",
                "description": "use in conjunction with `region`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "certification.gte",
                "in": "query",
                "description": "use in conjunction with `region`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "certification.lte",
                "in": "query",
                "description": "use in conjunction with `region`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "certification_country",
                "in": "query",
                "description": "use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "include_video",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "primary_release_year",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "primary_release_date.gte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "primary_release_date.lte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "region",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "release_date.gte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "release_date.lte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "sort_by",
                "in": "query",
                "schema": {
                    "type": "string",
                    "enum": [
                        "original_title.asc",
                        "original_title.desc",
                        "popularity.asc",
                        "popularity.desc",
                        "revenue.asc",
                        "revenue.desc",
                        "primary_release_date.asc",
                        "title.asc",
                        "title.desc",
                        "primary_release_date.desc",
                        "vote_average.asc",
                        "vote_average.desc",
                        "vote_count.asc",
                        "vote_count.desc"
                    ],
                    "default": "popularity.desc"
                }
            },
            {
                "name": "vote_average.gte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_average.lte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_count.gte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_count.lte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "watch_region",
                "in": "query",
                "description": "use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_cast",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_companies",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_crew",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_genres",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_keywords",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_origin_country",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_original_language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_people",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_release_type",
                "in": "query",
                "description": "possible values are: [1, 2, 3, 4, 5, 6] can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_runtime.gte",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_runtime.lte",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_watch_monetization_types",
                "in": "query",
                "description": "possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_watch_providers",
                "in": "query",
                "description": "use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_companies",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_genres",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_keywords",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_watch_providers",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "year",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/8YFL5QQVPy3AgrEQxNYVSgiPEbe.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 28,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 640146,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Ant-Man and the Wasp: Quantumania"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 9272.643,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2023-02-15"
                            },
                            "title": {
                                "type": "string",
                                "example": "Ant-Man and the Wasp: Quantumania"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 6.5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 1856,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 38020,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 760385,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/8YFL5QQVPy3AgrEQxNYVSgiPEbe.jpg",
                    "genre_ids": [
                        28
                    ],
                    "id": 640146,
                    "original_language": "en",
                    "original_title": "Ant-Man and the Wasp: Quantumania",
                    "overview": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible.",
                    "popularity": 9272.643,
                    "poster_path": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg",
                    "release_date": "2023-02-15",
                    "title": "Ant-Man and the Wasp: Quantumania",
                    "video": false,
                    "vote_average": 6.5,
                    "vote_count": 1856
                }
            ],
            "total_pages": 38020,
            "total_results": 760385
        },
        "code": "import requests\n\ndef discover_movies(certification=None, certification_gte=None, certification_lte=None, certification_country=None,\n                   include_adult=False, include_video=False, language=\"en-US\", page=1,\n                   primary_release_year=None, primary_release_date_gte=None, primary_release_date_lte=None,\n                   region=None, release_date_gte=None, release_date_lte=None, sort_by=\"popularity.desc\",\n                   vote_average_gte=None, vote_average_lte=None, vote_count_gte=None, vote_count_lte=None,\n                   watch_region=None, with_cast=None, with_companies=None, with_crew=None,\n                   with_genres=None, with_keywords=None, with_origin_country=None,\n                   with_original_language=None, with_people=None, with_release_type=None,\n                   with_runtime_gte=None, with_runtime_lte=None, with_watch_monetization_types=None,\n                   with_watch_providers=None, without_companies=None, without_genres=None,\n                   without_keywords=None, without_watch_providers=None, year=None):\n    '''\n    Fetches a list of movies based on various criteria for discovery.\n\n    Parameters:\n    - certification (str): Use in conjunction with `region`.\n    - certification_gte (str): Use in conjunction with `region`.\n    - certification_lte (str): Use in conjunction with `region`.\n    - certification_country (str): Use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters.\n    - include_adult (bool): Whether to include adult content. Default is False.\n    - include_video (bool): Whether to include video content. Default is False.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - primary_release_year (int): Filter by primary release year.\n    - primary_release_date_gte (str): Filter by primary release date greater than or equal to.\n    - primary_release_date_lte (str): Filter by primary release date less than or equal to.\n    - region (str): Filter by region.\n    - release_date_gte (str): Filter by release date greater than or equal to.\n    - release_date_lte (str): Filter by release date less than or equal to.\n    - sort_by (str): The sort order for the results. Default is \"popularity.desc\".\n    - vote_average_gte (float): Filter by vote average greater than or equal to.\n    - vote_average_lte (float): Filter by vote average less than or equal to.\n    - vote_count_gte (float): Filter by vote count greater than or equal to.\n    - vote_count_lte (float): Filter by vote count less than or equal to.\n    - watch_region (str): Use in conjunction with `with_watch_monetization_types ` or `with_watch_providers`.\n    - with_cast (str): Filter by specific cast. Can be a comma or pipe separated query.\n    - with_companies (str): Filter by specific companies. Can be a comma or pipe separated query.\n    - with_crew (str): Filter by specific crew. Can be a comma or pipe separated query.\n    - with_genres (str): Filter by specific genres. Can be a comma or pipe separated query.\n    - with_keywords (str): Filter by specific keywords. Can be a comma or pipe separated query.\n    - with_origin_country (str): Filter by origin country.\n    - with_original_language (str): Filter by original language.\n    - with_people (str): Filter by specific people. Can be a comma or pipe separated query.\n    - with_release_type (int): Filter by release type. Possible values are [1, 2, 3, 4, 5, 6].\n    - with_runtime_gte (int): Filter by runtime greater than or equal to.\n    - with_runtime_lte (int): Filter by runtime less than or equal to.\n    - with_watch_monetization_types (str): Use in conjunction with `watch_region`. Can be a comma or pipe separated query.\n    - with_watch_providers (str): Use in conjunction with `watch_region`. Can be a comma or pipe separated query.\n    - without_companies (str): Exclude certain companies. Can be a comma or pipe separated query.\n    - without_genres (str): Exclude certain genres. Can be a comma or pipe separated query.\n    - without_keywords (str): Exclude certain keywords. Can be a comma or pipe separated query.\n    - without_watch_providers (str): Exclude certain watch providers. Can be a comma or pipe separated query.\n    - year (int): Filter by year.\n\n    Returns:\n    - dict: A JSON response containing a list of movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/discover/movie\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the API request\n    params = {\n        \"certification\": certification,\n        \"certification.gte\": certification_gte,\n        \"certification.lte\": certification_lte,\n        \"certification_country\": certification_country,\n        \"include_adult\": include_adult,\n        \"include_video\": include_video,\n        \"language\": language,\n        \"page\": page,\n        \"primary_release_year\": primary_release_year,\n        \"primary_release_date.gte\": primary_release_date_gte,\n        \"primary_release_date.lte\": primary_release_date_lte,\n        \"region\": region,\n        \"release_date.gte\": release_date_gte,\n        \"release_date.lte\": release_date_lte,\n        \"sort_by\": sort_by,\n        \"vote_average.gte\": vote_average_gte,\n        \"vote_average.lte\": vote_average_lte,\n        \"vote_count.gte\": vote_count_gte,\n        \"vote_count.lte\": vote_count_lte,\n        \"watch_region\": watch_region,\n        \"with_cast\": with_cast,\n        \"with_companies\": with_companies,\n        \"with_crew\": with_crew,\n        \"with_genres\": with_genres,\n        \"with_keywords\": with_keywords,\n        \"with_origin_country\": with_origin_country,\n        \"with_original_language\": with_original_language,\n        \"with_people\": with_people,\n        \"with_release_type\": with_release_type,\n        \"with_runtime.gte\": with_runtime_gte,\n        \"with_runtime.lte\": with_runtime_lte,\n        \"with_watch_monetization_types\": with_watch_monetization_types,\n        \"with_watch_providers\": with_watch_providers,\n        \"without_companies\": without_companies,\n        \"without_genres\": without_genres,\n        \"without_keywords\": without_keywords,\n        \"without_watch_providers\": without_watch_providers,\n        \"year\": year,\n    }\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={k: v for k, v in params.items() if v is not None})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Find movies using over 30 filters and sort options. This API allows you to discover movies based on specific criteria such as genre, release date, rating, and more. It provides extensive filtering and sorting capabilities to help you narrow down your search and find the movies that match your preferences. This API is useful for users looking for specific types of movies or exploring new films based on various parameters.",
        "functionality": "This API allows users to discover movies by providing various filter parameters such as genre, release year, and sort options, and returns a paginated list of movie details including title, release date, popularity, and overview."
    },
    {
        "path": "/3/movie/{movie_id}",
        "description": "Get the top level details of a movie by ID.",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "append_to_response",
                "in": "query",
                "description": "comma separated list of endpoints within this namespace, 20 items max",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "backdrop_path": {
                    "type": "string",
                    "example": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg"
                },
                "belongs_to_collection": {},
                "budget": {
                    "type": "integer",
                    "example": 63000000,
                    "default": 0
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 18,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Drama"
                            }
                        }
                    }
                },
                "homepage": {
                    "type": "string",
                    "example": "http://www.foxmovies.com/movies/fight-club"
                },
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "imdb_id": {
                    "type": "string",
                    "example": "tt0137523"
                },
                "original_language": {
                    "type": "string",
                    "example": "en"
                },
                "original_title": {
                    "type": "string",
                    "example": "Fight Club"
                },
                "overview": {
                    "type": "string",
                    "example": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion."
                },
                "popularity": {
                    "type": "number",
                    "example": 61.416,
                    "default": 0
                },
                "poster_path": {
                    "type": "string",
                    "example": "/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg"
                },
                "production_companies": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 508,
                                "default": 0
                            },
                            "logo_path": {
                                "type": "string",
                                "example": "/7cxRWzi4LsVm4Utfpr1hfARNurT.png"
                            },
                            "name": {
                                "type": "string",
                                "example": "Regency Enterprises"
                            },
                            "origin_country": {
                                "type": "string",
                                "example": "US"
                            }
                        }
                    }
                },
                "production_countries": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "iso_3166_1": {
                                "type": "string",
                                "example": "US"
                            },
                            "name": {
                                "type": "string",
                                "example": "United States of America"
                            }
                        }
                    }
                },
                "release_date": {
                    "type": "string",
                    "example": "1999-10-15"
                },
                "revenue": {
                    "type": "integer",
                    "example": 100853753,
                    "default": 0
                },
                "runtime": {
                    "type": "integer",
                    "example": 139,
                    "default": 0
                },
                "spoken_languages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "english_name": {
                                "type": "string",
                                "example": "English"
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "en"
                            },
                            "name": {
                                "type": "string",
                                "example": "English"
                            }
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "example": "Released"
                },
                "tagline": {
                    "type": "string",
                    "example": "Mischief. Mayhem. Soap."
                },
                "title": {
                    "type": "string",
                    "example": "Fight Club"
                },
                "video": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "vote_average": {
                    "type": "number",
                    "example": 8.433,
                    "default": 0
                },
                "vote_count": {
                    "type": "integer",
                    "example": 26280,
                    "default": 0
                }
            }
        },
        "response_example": {
            "adult": false,
            "backdrop_path": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg",
            "belongs_to_collection": null,
            "budget": 63000000,
            "genres": [
                {
                    "id": 18,
                    "name": "Drama"
                }
            ],
            "homepage": "http://www.foxmovies.com/movies/fight-club",
            "id": 550,
            "imdb_id": "tt0137523",
            "original_language": "en",
            "original_title": "Fight Club",
            "overview": "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \"fight clubs\" forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.",
            "popularity": 61.416,
            "poster_path": "/pB8BM7pdSp6B6Ih7QZ4DrQ3PmJK.jpg",
            "production_companies": [
                {
                    "id": 508,
                    "logo_path": "/7cxRWzi4LsVm4Utfpr1hfARNurT.png",
                    "name": "Regency Enterprises",
                    "origin_country": "US"
                }
            ],
            "production_countries": [
                {
                    "iso_3166_1": "US",
                    "name": "United States of America"
                }
            ],
            "release_date": "1999-10-15",
            "revenue": 100853753,
            "runtime": 139,
            "spoken_languages": [
                {
                    "english_name": "English",
                    "iso_639_1": "en",
                    "name": "English"
                }
            ],
            "status": "Released",
            "tagline": "Mischief. Mayhem. Soap.",
            "title": "Fight Club",
            "video": false,
            "vote_average": 8.433,
            "vote_count": 26280
        },
        "code": "import requests\n\ndef get_movie_details(movie_id, append_to_response=None, language=\"en-US\"):\n    '''\n    Fetches details of a specific movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie to fetch details for. This is a required parameter.\n    - append_to_response (str): A comma-separated list of additional endpoints to include in the response. Optional.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing movie details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    \n    # Prepare query parameters\n    params = {}\n    if append_to_response:\n        params['append_to_response'] = append_to_response\n    params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the top level details of a movie by its ID. To use this API, you need to have the specific movie_id available. This API is useful for retrieving comprehensive information about a particular movie.",
        "functionality": "This API retrieves the top-level details of a specified movie by accepting a movie ID and returns comprehensive information about that movie, including its title, overview, release date, genres, and more."
    },
    {
        "path": "/3/tv/{series_id}",
        "description": "Get the details of a TV show.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "append_to_response",
                "in": "query",
                "description": "comma separated list of endpoints within this namespace, 20 items max",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "backdrop_path": {
                    "type": "string",
                    "example": "/6LWy0jvMpmjoS9fojNgHIKoWL05.jpg"
                },
                "created_by": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 9813,
                                "default": 0
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8c219c2956ff604858a"
                            },
                            "name": {
                                "type": "string",
                                "example": "David Benioff"
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/xvNN5huL0X8yJ7h3IZfGG4O2zBD.jpg"
                            }
                        }
                    }
                },
                "episode_run_time": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "example": 60,
                        "default": 0
                    }
                },
                "first_air_date": {
                    "type": "string",
                    "example": "2011-04-17"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 10765,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Sci-Fi & Fantasy"
                            }
                        }
                    }
                },
                "homepage": {
                    "type": "string",
                    "example": "http://www.hbo.com/game-of-thrones"
                },
                "id": {
                    "type": "integer",
                    "example": 1399,
                    "default": 0
                },
                "in_production": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "en"
                    }
                },
                "last_air_date": {
                    "type": "string",
                    "example": "2019-05-19"
                },
                "last_episode_to_air": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "example": 1551830,
                            "default": 0
                        },
                        "name": {
                            "type": "string",
                            "example": "The Iron Throne"
                        },
                        "overview": {
                            "type": "string",
                            "example": "In the aftermath of the devastating attack on King's Landing, Daenerys must face the survivors."
                        },
                        "vote_average": {
                            "type": "number",
                            "example": 4.809,
                            "default": 0
                        },
                        "vote_count": {
                            "type": "integer",
                            "example": 241,
                            "default": 0
                        },
                        "air_date": {
                            "type": "string",
                            "example": "2019-05-19"
                        },
                        "episode_number": {
                            "type": "integer",
                            "example": 6,
                            "default": 0
                        },
                        "production_code": {
                            "type": "string",
                            "example": "806"
                        },
                        "runtime": {
                            "type": "integer",
                            "example": 80,
                            "default": 0
                        },
                        "season_number": {
                            "type": "integer",
                            "example": 8,
                            "default": 0
                        },
                        "show_id": {
                            "type": "integer",
                            "example": 1399,
                            "default": 0
                        },
                        "still_path": {
                            "type": "string",
                            "example": "/zBi2O5EJfgTS6Ae0HdAYLm9o2nf.jpg"
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Game of Thrones"
                },
                "next_episode_to_air": {},
                "networks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 49,
                                "default": 0
                            },
                            "logo_path": {
                                "type": "string",
                                "example": "/tuomPhY2UtuPTqqFnKMVHvSb724.png"
                            },
                            "name": {
                                "type": "string",
                                "example": "HBO"
                            },
                            "origin_country": {
                                "type": "string",
                                "example": "US"
                            }
                        }
                    }
                },
                "number_of_episodes": {
                    "type": "integer",
                    "example": 73,
                    "default": 0
                },
                "number_of_seasons": {
                    "type": "integer",
                    "example": 8,
                    "default": 0
                },
                "origin_country": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "US"
                    }
                },
                "original_language": {
                    "type": "string",
                    "example": "en"
                },
                "original_name": {
                    "type": "string",
                    "example": "Game of Thrones"
                },
                "overview": {
                    "type": "string",
                    "example": "Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond."
                },
                "popularity": {
                    "type": "number",
                    "example": 346.098,
                    "default": 0
                },
                "poster_path": {
                    "type": "string",
                    "example": "/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg"
                },
                "production_companies": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 76043,
                                "default": 0
                            },
                            "logo_path": {
                                "type": "string",
                                "example": "/9RO2vbQ67otPrBLXCaC8UMp3Qat.png"
                            },
                            "name": {
                                "type": "string",
                                "example": "Revolution Sun Studios"
                            },
                            "origin_country": {
                                "type": "string",
                                "example": "US"
                            }
                        }
                    }
                },
                "production_countries": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "iso_3166_1": {
                                "type": "string",
                                "example": "GB"
                            },
                            "name": {
                                "type": "string",
                                "example": "United Kingdom"
                            }
                        }
                    }
                },
                "seasons": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "air_date": {
                                "type": "string",
                                "example": "2010-12-05"
                            },
                            "episode_count": {
                                "type": "integer",
                                "example": 272,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 3627,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Specials"
                            },
                            "overview": {
                                "type": "string",
                                "example": ""
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/kMTcwNRfFKCZ0O2OaBZS0nZ2AIe.jpg"
                            },
                            "season_number": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "spoken_languages": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "english_name": {
                                "type": "string",
                                "example": "English"
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "en"
                            },
                            "name": {
                                "type": "string",
                                "example": "English"
                            }
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "example": "Ended"
                },
                "tagline": {
                    "type": "string",
                    "example": "Winter Is Coming"
                },
                "type": {
                    "type": "string",
                    "example": "Scripted"
                },
                "vote_average": {
                    "type": "number",
                    "example": 8.438,
                    "default": 0
                },
                "vote_count": {
                    "type": "integer",
                    "example": 21390,
                    "default": 0
                }
            }
        },
        "response_example": {
            "adult": false,
            "backdrop_path": "/6LWy0jvMpmjoS9fojNgHIKoWL05.jpg",
            "created_by": [
                {
                    "id": 9813,
                    "credit_id": "5256c8c219c2956ff604858a",
                    "name": "David Benioff",
                    "gender": 2,
                    "profile_path": "/xvNN5huL0X8yJ7h3IZfGG4O2zBD.jpg"
                }
            ],
            "episode_run_time": [
                60
            ],
            "first_air_date": "2011-04-17",
            "genres": [
                {
                    "id": 10765,
                    "name": "Sci-Fi & Fantasy"
                }
            ],
            "homepage": "http://www.hbo.com/game-of-thrones",
            "id": 1399,
            "in_production": false,
            "languages": [
                "en"
            ],
            "last_air_date": "2019-05-19",
            "last_episode_to_air": {
                "id": 1551830,
                "name": "The Iron Throne",
                "overview": "In the aftermath of the devastating attack on King's Landing, Daenerys must face the survivors.",
                "vote_average": 4.809,
                "vote_count": 241,
                "air_date": "2019-05-19",
                "episode_number": 6,
                "production_code": "806",
                "runtime": 80,
                "season_number": 8,
                "show_id": 1399,
                "still_path": "/zBi2O5EJfgTS6Ae0HdAYLm9o2nf.jpg"
            },
            "name": "Game of Thrones",
            "next_episode_to_air": null,
            "networks": [
                {
                    "id": 49,
                    "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
                    "name": "HBO",
                    "origin_country": "US"
                }
            ],
            "number_of_episodes": 73,
            "number_of_seasons": 8,
            "origin_country": [
                "US"
            ],
            "original_language": "en",
            "original_name": "Game of Thrones",
            "overview": "Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.",
            "popularity": 346.098,
            "poster_path": "/1XS1oqL89opfnbLl8WnZY1O1uJx.jpg",
            "production_companies": [
                {
                    "id": 76043,
                    "logo_path": "/9RO2vbQ67otPrBLXCaC8UMp3Qat.png",
                    "name": "Revolution Sun Studios",
                    "origin_country": "US"
                }
            ],
            "production_countries": [
                {
                    "iso_3166_1": "GB",
                    "name": "United Kingdom"
                }
            ],
            "seasons": [
                {
                    "air_date": "2010-12-05",
                    "episode_count": 272,
                    "id": 3627,
                    "name": "Specials",
                    "overview": "",
                    "poster_path": "/kMTcwNRfFKCZ0O2OaBZS0nZ2AIe.jpg",
                    "season_number": 0,
                    "vote_average": 0
                }
            ],
            "spoken_languages": [
                {
                    "english_name": "English",
                    "iso_639_1": "en",
                    "name": "English"
                }
            ],
            "status": "Ended",
            "tagline": "Winter Is Coming",
            "type": "Scripted",
            "vote_average": 8.438,
            "vote_count": 21390
        },
        "code": "import requests\n\ndef get_tv_series_details(series_id, append_to_response=None, language=\"en-US\"):\n    '''\n    Fetches details about a specific TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series to fetch details for. This is a required parameter.\n    - append_to_response (str): A comma-separated list of additional endpoints to include in the response. Optional.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the TV series details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {\n        \"append_to_response\": append_to_response,\n        \"language\": language\n    }\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the top level details of a TV show by providing the series_id. This API is useful for retrieving comprehensive information about a specific TV show. It should be used after searching for TV shows using /3/search/tv.",
        "functionality": "This API retrieves detailed information about a specific TV show by accepting a series ID and returns comprehensive data including the show's name, overview, genres, episode details, and production information."
    },
    {
        "path": "/3/search/tv",
        "description": "Search for TV shows by their original, translated and also known as names.",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "first_air_date_year",
                "in": "query",
                "description": "Search only the first air date. Valid values are: 1000..9999",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "year",
                "in": "query",
                "description": "Search the first air date and all episode air dates. Valid values are: 1000..9999",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/bsNm9z2TJfe0WO3RedPGWQ8mG1X.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 1396,
                                "default": 0
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "US"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Breaking Bad"
                            },
                            "overview": {
                                "type": "string",
                                "example": "When Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 298.884,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/ggFHVNu6YYI5L9pCfOacjizRGt.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2008-01-20"
                            },
                            "name": {
                                "type": "string",
                                "example": "Breaking Bad"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.879,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 11536,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/bsNm9z2TJfe0WO3RedPGWQ8mG1X.jpg",
                    "genre_ids": [
                        18
                    ],
                    "id": 1396,
                    "origin_country": [
                        "US"
                    ],
                    "original_language": "en",
                    "original_name": "Breaking Bad",
                    "overview": "When Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.",
                    "popularity": 298.884,
                    "poster_path": "/ggFHVNu6YYI5L9pCfOacjizRGt.jpg",
                    "first_air_date": "2008-01-20",
                    "name": "Breaking Bad",
                    "vote_average": 8.879,
                    "vote_count": 11536
                }
            ],
            "total_pages": 1,
            "total_results": 1
        },
        "code": "import requests\n\ndef search_tv_shows(query, first_air_date_year=None, include_adult=False, language=\"en-US\", page=1, year=None):\n    '''\n    Searches for TV shows based on the provided query and optional parameters.\n\n    Parameters:\n    - query (str): The search query for the TV shows. This is a required parameter.\n    - first_air_date_year (int, optional): Search only the first air date. Valid values are: 1000..9999.\n    - include_adult (bool, optional): Whether to include adult content in the search results. Default is False.\n    - language (str, optional): The language code for the response. Default is \"en-US\".\n    - page (int, optional): The page number for pagination. Default is 1.\n    - year (int, optional): Search the first air date and all episode air dates. Valid values are: 1000..9999.\n\n    Returns:\n    - dict: A JSON response containing the search results if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/search/tv\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"query\": query,\n        \"first_air_date_year\": first_air_date_year,\n        \"include_adult\": include_adult,\n        \"language\": language,\n        \"page\": page,\n        \"year\": year\n    }\n    # Remove parameters that are None\n    params = {k: v for k, v in params.items() if v is not None}\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Search for TV shows by their original, translated, and alternative names. This API allows you to find TV shows based on various titles associated with them. To use this API effectively, you should provide the necessary search criteria and parameters to narrow down the results.",
        "functionality": "This API allows users to search for TV shows using a query string and returns a list of matching shows, including details such as the show's ID, name, overview, air date, and popularity metrics."
    },
    {
        "path": "/3/search/person",
        "description": "Search for people by their name and also known as names.",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 31,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Tom Hanks"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Tom Hanks"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 84.631,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/xndWFsBlClOJFRdhSt4NBwiPq2o.jpg"
                            },
                            "known_for": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "adult": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "backdrop_path": {
                                            "type": "string",
                                            "example": "/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg"
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 13,
                                            "default": 0
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Forrest Gump"
                                        },
                                        "original_language": {
                                            "type": "string",
                                            "example": "en"
                                        },
                                        "original_title": {
                                            "type": "string",
                                            "example": "Forrest Gump"
                                        },
                                        "overview": {
                                            "type": "string",
                                            "example": "A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him."
                                        },
                                        "poster_path": {
                                            "type": "string",
                                            "example": "/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg"
                                        },
                                        "media_type": {
                                            "type": "string",
                                            "example": "movie"
                                        },
                                        "genre_ids": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "example": 35,
                                                "default": 0
                                            }
                                        },
                                        "popularity": {
                                            "type": "number",
                                            "example": 67.209,
                                            "default": 0
                                        },
                                        "release_date": {
                                            "type": "string",
                                            "example": "1994-06-23"
                                        },
                                        "video": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "vote_average": {
                                            "type": "number",
                                            "example": 8.481,
                                            "default": 0
                                        },
                                        "vote_count": {
                                            "type": "integer",
                                            "example": 24525,
                                            "default": 0
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 31,
                    "known_for_department": "Acting",
                    "name": "Tom Hanks",
                    "original_name": "Tom Hanks",
                    "popularity": 84.631,
                    "profile_path": "/xndWFsBlClOJFRdhSt4NBwiPq2o.jpg",
                    "known_for": [
                        {
                            "adult": false,
                            "backdrop_path": "/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg",
                            "id": 13,
                            "title": "Forrest Gump",
                            "original_language": "en",
                            "original_title": "Forrest Gump",
                            "overview": "A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.",
                            "poster_path": "/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg",
                            "media_type": "movie",
                            "genre_ids": [
                                35
                            ],
                            "popularity": 67.209,
                            "release_date": "1994-06-23",
                            "video": false,
                            "vote_average": 8.481,
                            "vote_count": 24525
                        }
                    ]
                }
            ],
            "total_pages": 1,
            "total_results": 1
        },
        "code": "import requests\n\ndef search_person(query, include_adult=False, language=\"en-US\", page=1):\n    '''\n    Searches for a person by name.\n\n    Parameters:\n    - query (str): The name of the person to search for. This is a required parameter.\n    - include_adult (bool): Whether to include adult content in the search results. Default is False.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing the search results if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/search/person\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"query\": query, \"include_adult\": include_adult, \"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Search for people by their name and also known as names. This API allows you to find individuals based on their primary and alternative names. To use this API effectively, you should provide the name or alias of the person you are searching for.",
        "functionality": "This API allows users to search for people by name by providing a search query and returns a list of matching individuals along with their details, including IDs, popularity, and known works."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}",
        "description": "Query the details of a TV season.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "append_to_response",
                "in": "query",
                "description": "comma separated list of endpoints within this namespace, 20 items max",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "5256c89f19c2956ff6046d47"
                },
                "air_date": {
                    "type": "string",
                    "example": "2011-04-17"
                },
                "episodes": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "air_date": {
                                "type": "string",
                                "example": "2011-04-17"
                            },
                            "episode_number": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 63056,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Winter Is Coming"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army."
                            },
                            "production_code": {
                                "type": "string",
                                "example": "101"
                            },
                            "runtime": {
                                "type": "integer",
                                "example": 62,
                                "default": 0
                            },
                            "season_number": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "show_id": {
                                "type": "integer",
                                "example": 1399,
                                "default": 0
                            },
                            "still_path": {
                                "type": "string",
                                "example": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 7.838,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 291,
                                "default": 0
                            },
                            "crew": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "department": {
                                            "type": "string",
                                            "example": "Directing"
                                        },
                                        "job": {
                                            "type": "string",
                                            "example": "Director"
                                        },
                                        "credit_id": {
                                            "type": "string",
                                            "example": "5256c8a219c2956ff6046e77"
                                        },
                                        "adult": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "gender": {
                                            "type": "integer",
                                            "example": 2,
                                            "default": 0
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 44797,
                                            "default": 0
                                        },
                                        "known_for_department": {
                                            "type": "string",
                                            "example": "Directing"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Timothy Van Patten"
                                        },
                                        "original_name": {
                                            "type": "string",
                                            "example": "Timothy Van Patten"
                                        },
                                        "popularity": {
                                            "type": "number",
                                            "example": 6.048,
                                            "default": 0
                                        },
                                        "profile_path": {
                                            "type": "string",
                                            "example": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                                        }
                                    }
                                }
                            },
                            "guest_stars": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "character": {
                                            "type": "string",
                                            "example": "Benjen Stark"
                                        },
                                        "credit_id": {
                                            "type": "string",
                                            "example": "5256c8b919c2956ff604836a"
                                        },
                                        "order": {
                                            "type": "integer",
                                            "example": 62,
                                            "default": 0
                                        },
                                        "adult": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "gender": {
                                            "type": "integer",
                                            "example": 2,
                                            "default": 0
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 119783,
                                            "default": 0
                                        },
                                        "known_for_department": {
                                            "type": "string",
                                            "example": "Acting"
                                        },
                                        "name": {
                                            "type": "string",
                                            "example": "Joseph Mawle"
                                        },
                                        "original_name": {
                                            "type": "string",
                                            "example": "Joseph Mawle"
                                        },
                                        "popularity": {
                                            "type": "number",
                                            "example": 13.517,
                                            "default": 0
                                        },
                                        "profile_path": {
                                            "type": "string",
                                            "example": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Season 1"
                },
                "overview": {
                    "type": "string",
                    "example": "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring."
                },
                "id": {
                    "type": "integer",
                    "example": 3624,
                    "default": 0
                },
                "poster_path": {
                    "type": "string",
                    "example": "/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg"
                },
                "season_number": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "vote_average": {
                    "type": "number",
                    "example": 8.3,
                    "default": 0
                }
            }
        },
        "response_example": {
            "_id": "5256c89f19c2956ff6046d47",
            "air_date": "2011-04-17",
            "episodes": [
                {
                    "air_date": "2011-04-17",
                    "episode_number": 1,
                    "id": 63056,
                    "name": "Winter Is Coming",
                    "overview": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army.",
                    "production_code": "101",
                    "runtime": 62,
                    "season_number": 1,
                    "show_id": 1399,
                    "still_path": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg",
                    "vote_average": 7.838,
                    "vote_count": 291,
                    "crew": [
                        {
                            "department": "Directing",
                            "job": "Director",
                            "credit_id": "5256c8a219c2956ff6046e77",
                            "adult": false,
                            "gender": 2,
                            "id": 44797,
                            "known_for_department": "Directing",
                            "name": "Timothy Van Patten",
                            "original_name": "Timothy Van Patten",
                            "popularity": 6.048,
                            "profile_path": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                        }
                    ],
                    "guest_stars": [
                        {
                            "character": "Benjen Stark",
                            "credit_id": "5256c8b919c2956ff604836a",
                            "order": 62,
                            "adult": false,
                            "gender": 2,
                            "id": 119783,
                            "known_for_department": "Acting",
                            "name": "Joseph Mawle",
                            "original_name": "Joseph Mawle",
                            "popularity": 13.517,
                            "profile_path": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                        }
                    ]
                }
            ],
            "name": "Season 1",
            "overview": "Trouble is brewing in the Seven Kingdoms of Westeros. For the driven inhabitants of this visionary world, control of Westeros' Iron Throne holds the lure of great power. But in a land where the seasons can last a lifetime, winter is coming...and beyond the Great Wall that protects them, an ancient evil has returned. In Season One, the story centers on three primary areas: the Stark and the Lannister families, whose designs on controlling the throne threaten a tenuous peace; the dragon princess Daenerys, heir to the former dynasty, who waits just over the Narrow Sea with her malevolent brother Viserys; and the Great Wall--a massive barrier of ice where a forgotten danger is stirring.",
            "id": 3624,
            "poster_path": "/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg",
            "season_number": 1,
            "vote_average": 8.3
        },
        "code": "import requests\n\ndef get_tv_season(series_id, season_number, append_to_response=None, language=\"en-US\"):\n    '''\n    Fetches details about a specific season of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number to retrieve. This is a required parameter.\n    - append_to_response (str): A comma-separated list of additional endpoints to include in the response (optional).\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the season details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {\n        \"append_to_response\": append_to_response,\n        \"language\": language\n    }\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Query the details of a specific TV season by providing the series_id and season_number. This API allows you to retrieve comprehensive information about a particular season of a TV show. To use this API effectively, you should first obtain the series_id by searching for TV shows using /3/search/tv.",
        "functionality": "This API retrieves detailed information about a specific season of a TV series by accepting a series ID and a season number, returning data that includes the season's air date, episodes, overview, and ratings."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}",
        "description": "Query the details of a TV episode.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "episode_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "append_to_response",
                "in": "query",
                "description": "comma separated list of endpoints within this namespace, 20 items max",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "air_date": {
                    "type": "string",
                    "example": "2011-04-17"
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "department": {
                                "type": "string",
                                "example": "Directing"
                            },
                            "job": {
                                "type": "string",
                                "example": "Director"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8a219c2956ff6046e77"
                            },
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 44797,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Directing"
                            },
                            "name": {
                                "type": "string",
                                "example": "Timothy Van Patten"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Timothy Van Patten"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 7.775,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                            }
                        }
                    }
                },
                "episode_number": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "guest_stars": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "character": {
                                "type": "string",
                                "example": "Benjen Stark"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8b919c2956ff604836a"
                            },
                            "order": {
                                "type": "integer",
                                "example": 62,
                                "default": 0
                            },
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 119783,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Joseph Mawle"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Joseph Mawle"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 6.758,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                            }
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "example": "Winter Is Coming"
                },
                "overview": {
                    "type": "string",
                    "example": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army."
                },
                "id": {
                    "type": "integer",
                    "example": 63056,
                    "default": 0
                },
                "production_code": {
                    "type": "string",
                    "example": "101"
                },
                "runtime": {
                    "type": "integer",
                    "example": 62,
                    "default": 0
                },
                "season_number": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "still_path": {
                    "type": "string",
                    "example": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg"
                },
                "vote_average": {
                    "type": "number",
                    "example": 7.8,
                    "default": 0
                },
                "vote_count": {
                    "type": "integer",
                    "example": 286,
                    "default": 0
                }
            }
        },
        "response_example": {
            "air_date": "2011-04-17",
            "crew": [
                {
                    "department": "Directing",
                    "job": "Director",
                    "credit_id": "5256c8a219c2956ff6046e77",
                    "adult": false,
                    "gender": 2,
                    "id": 44797,
                    "known_for_department": "Directing",
                    "name": "Timothy Van Patten",
                    "original_name": "Timothy Van Patten",
                    "popularity": 7.775,
                    "profile_path": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                }
            ],
            "episode_number": 1,
            "guest_stars": [
                {
                    "character": "Benjen Stark",
                    "credit_id": "5256c8b919c2956ff604836a",
                    "order": 62,
                    "adult": false,
                    "gender": 2,
                    "id": 119783,
                    "known_for_department": "Acting",
                    "name": "Joseph Mawle",
                    "original_name": "Joseph Mawle",
                    "popularity": 6.758,
                    "profile_path": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                }
            ],
            "name": "Winter Is Coming",
            "overview": "Jon Arryn, the Hand of the King, is dead. King Robert Baratheon plans to ask his oldest friend, Eddard Stark, to take Jon's place. Across the sea, Viserys Targaryen plans to wed his sister to a nomadic warlord in exchange for an army.",
            "id": 63056,
            "production_code": "101",
            "runtime": 62,
            "season_number": 1,
            "still_path": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg",
            "vote_average": 7.8,
            "vote_count": 286
        },
        "code": "import requests\n\ndef get_episode_details(series_id, season_number, episode_number, append_to_response=None, language=\"en-US\"):\n    '''\n    Fetches details about a specific episode of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number of the episode. This is a required parameter.\n    - episode_number (int): The episode number within the season. This is a required parameter.\n    - append_to_response (str): A comma-separated list of additional endpoints to include in the response (optional).\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing episode details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}/episode/{episode_number}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    \n    # Prepare query parameters\n    params = {\n        \"language\": language\n    }\n    if append_to_response:\n        params[\"append_to_response\"] = append_to_response\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Query the details of a specific TV episode by providing the series_id, season_number, and episode_number. This API allows you to retrieve detailed information about a particular episode within a TV series. It should be used following the retrieval of TV series details using the /3/tv/{series_id} endpoint.",
        "functionality": "This API retrieves detailed information about a specific TV episode by accepting the series ID, season number, and episode number, and returns episode details including the air date, name, overview, and crew information."
    },
    {
        "path": "/3/discover/tv",
        "description": "Find TV shows using over 30 filters and sort options.",
        "parameters": [
            {
                "name": "air_date.gte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "air_date.lte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "first_air_date_year",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "first_air_date.gte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "first_air_date.lte",
                "in": "query",
                "schema": {
                    "type": "string",
                    "format": "date"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "include_null_first_air_dates",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "screened_theatrically",
                "in": "query",
                "schema": {
                    "type": "boolean"
                }
            },
            {
                "name": "sort_by",
                "in": "query",
                "schema": {
                    "type": "string",
                    "enum": [
                        "first_air_date.asc",
                        "first_air_date.desc",
                        "name.asc",
                        "name.desc",
                        "original_name.asc",
                        "original_name.desc",
                        "popularity.asc",
                        "popularity.desc",
                        "vote_average.asc",
                        "vote_average.desc",
                        "vote_count.asc",
                        "vote_count.desc"
                    ],
                    "default": "popularity.desc"
                }
            },
            {
                "name": "timezone",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "vote_average.gte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_average.lte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_count.gte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "vote_count.lte",
                "in": "query",
                "schema": {
                    "type": "number",
                    "format": "float"
                }
            },
            {
                "name": "watch_region",
                "in": "query",
                "description": "use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_companies",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_genres",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_keywords",
                "in": "query",
                "description": "can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_networks",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_origin_country",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_original_language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_runtime.gte",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_runtime.lte",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            {
                "name": "with_status",
                "in": "query",
                "description": "possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_watch_monetization_types",
                "in": "query",
                "description": "possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_watch_providers",
                "in": "query",
                "description": "use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_companies",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_genres",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_keywords",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "without_watch_providers",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "with_type",
                "in": "query",
                "description": "possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "backdrop_path": {
                                "type": "string",
                                "example": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2023-01-23"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 9648,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 202250,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "PH"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "tl"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "overview": {
                                "type": "string",
                                "example": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 2684.061,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/ujlkQtHAVShWyWTloGU2Vh5Jbo9.jpg"
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 13,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 7414,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 148265,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg",
                    "first_air_date": "2023-01-23",
                    "genre_ids": [
                        9648
                    ],
                    "id": 202250,
                    "name": "Dirty Linen",
                    "origin_country": [
                        "PH"
                    ],
                    "original_language": "tl",
                    "original_name": "Dirty Linen",
                    "overview": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot.",
                    "popularity": 2684.061,
                    "poster_path": "/ujlkQtHAVShWyWTloGU2Vh5Jbo9.jpg",
                    "vote_average": 5,
                    "vote_count": 13
                }
            ],
            "total_pages": 7414,
            "total_results": 148265
        },
        "code": "import requests\n\ndef discover_tv_shows(air_date_gte=None, air_date_lte=None, first_air_date_year=None, \n                      first_air_date_gte=None, first_air_date_lte=None, \n                      include_adult=False, include_null_first_air_dates=False, \n                      language=\"en-US\", page=1, screened_theatrically=None, \n                      sort_by=\"popularity.desc\", timezone=None, vote_average_gte=None, \n                      vote_average_lte=None, vote_count_gte=None, vote_count_lte=None, \n                      watch_region=None, with_companies=None, with_genres=None, \n                      with_keywords=None, with_networks=None, with_origin_country=None, \n                      with_original_language=None, with_runtime_gte=None, \n                      with_runtime_lte=None, with_status=None, \n                      with_watch_monetization_types=None, with_watch_providers=None, \n                      without_companies=None, without_genres=None, \n                      without_keywords=None, without_watch_providers=None, \n                      with_type=None):\n    '''\n    Fetches a list of TV shows based on various criteria.\n\n    Parameters:\n    - air_date_gte (str): Filter shows that air date is greater than or equal to this date.\n    - air_date_lte (str): Filter shows that air date is less than or equal to this date.\n    - first_air_date_year (int): Filter shows that first aired in this year.\n    - first_air_date_gte (str): Filter shows that first air date is greater than or equal to this date.\n    - first_air_date_lte (str): Filter shows that first air date is less than or equal to this date.\n    - include_adult (bool): Include adult content in the results. Default is False.\n    - include_null_first_air_dates (bool): Include shows with null first air dates. Default is False.\n    - language (str): Specify a language code for the response. Default is \"en-US\".\n    - page (int): Specify the page of results to return. Default is 1.\n    - screened_theatrically (bool): Filter by shows that were screened theatrically.\n    - sort_by (str): Specify the sort order for the results. Default is \"popularity.desc\".\n    - timezone (str): Specify a timezone.\n    - vote_average_gte (float): Filter shows that have a vote average greater than or equal to this value.\n    - vote_average_lte (float): Filter shows that have a vote average less than or equal to this value.\n    - vote_count_gte (float): Filter shows that have a vote count greater than or equal to this value.\n    - vote_count_lte (float): Filter shows that have a vote count less than or equal to this value.\n    - watch_region (str): Filter shows based on the watch region.\n    - with_companies (str): Filter shows with specific companies, can be a comma or pipe separated query.\n    - with_genres (str): Filter shows with specific genres, can be a comma or pipe separated query.\n    - with_keywords (str): Filter shows with specific keywords, can be a comma or pipe separated query.\n    - with_networks (int): Filter shows aired on specific networks.\n    - with_origin_country (str): Filter shows based on origin country.\n    - with_original_language (str): Filter shows based on the original language.\n    - with_runtime_gte (int): Filter shows with runtime greater than or equal to this value.\n    - with_runtime_lte (int): Filter shows with runtime less than or equal to this value.\n    - with_status (str): Filter shows based on their status, can be comma or pipe separated query.\n    - with_watch_monetization_types (str): Filter shows with specific watch monetization types.\n    - with_watch_providers (str): Filter shows with specific watch providers.\n    - without_companies (str): Exclude shows from specific companies.\n    - without_genres (str): Exclude shows from specific genres.\n    - without_keywords (str): Exclude shows based on specific keywords.\n    - without_watch_providers (str): Exclude shows from specific watch providers.\n    - with_type (str): Filter shows based on specific types, can be comma or pipe separated query.\n\n    Returns:\n    - dict: A JSON response containing a list of TV shows if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/discover/tv\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Create the params dictionary for the request\n    params = {\n        \"air_date.gte\": air_date_gte,\n        \"air_date.lte\": air_date_lte,\n        \"first_air_date_year\": first_air_date_year,\n        \"first_air_date.gte\": first_air_date_gte,\n        \"first_air_date.lte\": first_air_date_lte,\n        \"include_adult\": include_adult,\n        \"include_null_first_air_dates\": include_null_first_air_dates,\n        \"language\": language,\n        \"page\": page,\n        \"screened_theatrically\": screened_theatrically,\n        \"sort_by\": sort_by,\n        \"timezone\": timezone,\n        \"vote_average.gte\": vote_average_gte,\n        \"vote_average.lte\": vote_average_lte,\n        \"vote_count.gte\": vote_count_gte,\n        \"vote_count.lte\": vote_count_lte,\n        \"watch_region\": watch_region,\n        \"with_companies\": with_companies,\n        \"with_genres\": with_genres,\n        \"with_keywords\": with_keywords,\n        \"with_networks\": with_networks,\n        \"with_origin_country\": with_origin_country,\n        \"with_original_language\": with_original_language,\n        \"with_runtime.gte\": with_runtime_gte,\n        \"with_runtime.lte\": with_runtime_lte,\n        \"with_status\": with_status,\n        \"with_watch_monetization_types\": with_watch_monetization_types,\n        \"with_watch_providers\": with_watch_providers,\n        \"without_companies\": without_companies,\n        \"without_genres\": without_genres,\n        \"without_keywords\": without_keywords,\n        \"without_watch_providers\": without_watch_providers,\n        \"with_type\": with_type\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={k: v for k, v in params.items() if v is not None})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Find TV shows using over 30 filters and sort options. This API allows you to discover TV shows based on various criteria such as genres, ratings, and release dates. It provides extensive filtering and sorting capabilities to help you find TV shows that match your preferences. To use this API effectively, you can combine it with the search functionality to further refine your results.",
        "functionality": "This API allows users to discover TV shows by providing various filters such as air date, language, and genres, and returns a paginated list of TV shows with details including title, overview, and ratings."
    },
    {
        "path": "/3/movie/{movie_id}/images",
        "description": "Get the images that belong to a movie.",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "include_image_language",
                "in": "query",
                "description": "specify a comma separated list of ISO-639-1 values to query, for example: `en,null`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "backdrops": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 1.778,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 800,
                                "default": 0
                            },
                            "iso_639_1": {},
                            "file_path": {
                                "type": "string",
                                "example": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.622,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 20,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 1422,
                                "default": 0
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "logos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 5.203,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 79,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "he"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/c1KLulrIhUqY5fT42nmC5aERGCp.png"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.312,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 411,
                                "default": 0
                            }
                        }
                    }
                },
                "posters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 0.667,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 900,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "pt"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/r3pPehX4ik8NLYPpbDRAh0YRtMb.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.258,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 6,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 600,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "backdrops": [
                {
                    "aspect_ratio": 1.778,
                    "height": 800,
                    "iso_639_1": null,
                    "file_path": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg",
                    "vote_average": 5.622,
                    "vote_count": 20,
                    "width": 1422
                }
            ],
            "id": 550,
            "logos": [
                {
                    "aspect_ratio": 5.203,
                    "height": 79,
                    "iso_639_1": "he",
                    "file_path": "/c1KLulrIhUqY5fT42nmC5aERGCp.png",
                    "vote_average": 5.312,
                    "vote_count": 1,
                    "width": 411
                }
            ],
            "posters": [
                {
                    "aspect_ratio": 0.667,
                    "height": 900,
                    "iso_639_1": "pt",
                    "file_path": "/r3pPehX4ik8NLYPpbDRAh0YRtMb.jpg",
                    "vote_average": 5.258,
                    "vote_count": 6,
                    "width": 600
                }
            ]
        },
        "code": "import requests\n\ndef get_movie_images(movie_id, include_image_language=None, language=None):\n    '''\n    Fetches images for the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to fetch images. This is a required parameter.\n    - include_image_language (str): A comma-separated list of ISO-639-1 values to query for image languages.\n    - language (str): The language code for the response.\n\n    Returns:\n    - dict: A JSON response containing movie images if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {}\n    if include_image_language:\n        params['include_image_language'] = include_image_language\n    if language:\n        params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the images that belong to a specific movie identified by its movie_id. To use this API, you need to obtain the movie_id first, which can be done through the /3/search/movie API.",
        "functionality": "This API retrieves images associated with a specified movie by accepting a movie ID and returns an object containing arrays of backdrops, logos, and posters."
    },
    {
        "path": "/3/tv/{series_id}/images",
        "description": "Get the images that belong to a TV series.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "include_image_language",
                "in": "query",
                "description": "specify a comma separated list of ISO-639-1 values to query, for example: `en,null`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "backdrops": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 1.778,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 800,
                                "default": 0
                            },
                            "iso_639_1": {},
                            "file_path": {
                                "type": "string",
                                "example": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.622,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 20,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 1422,
                                "default": 0
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "logos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 5.203,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 79,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "he"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/c1KLulrIhUqY5fT42nmC5aERGCp.png"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.312,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 411,
                                "default": 0
                            }
                        }
                    }
                },
                "posters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 0.667,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 900,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "pt"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/r3pPehX4ik8NLYPpbDRAh0YRtMb.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.258,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 6,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 600,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "backdrops": [
                {
                    "aspect_ratio": 1.778,
                    "height": 800,
                    "iso_639_1": null,
                    "file_path": "/hZkgoQYus5vegHoetLkCJzb17zJ.jpg",
                    "vote_average": 5.622,
                    "vote_count": 20,
                    "width": 1422
                }
            ],
            "id": 550,
            "logos": [
                {
                    "aspect_ratio": 5.203,
                    "height": 79,
                    "iso_639_1": "he",
                    "file_path": "/c1KLulrIhUqY5fT42nmC5aERGCp.png",
                    "vote_average": 5.312,
                    "vote_count": 1,
                    "width": 411
                }
            ],
            "posters": [
                {
                    "aspect_ratio": 0.667,
                    "height": 900,
                    "iso_639_1": "pt",
                    "file_path": "/r3pPehX4ik8NLYPpbDRAh0YRtMb.jpg",
                    "vote_average": 5.258,
                    "vote_count": 6,
                    "width": 600
                }
            ]
        },
        "code": "import requests\n\ndef get_tv_images(series_id, include_image_language=None, language=None):\n    '''\n    Fetches images for the specified TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series for which to fetch images. This is a required parameter.\n    - include_image_language (str): A comma-separated list of ISO-639-1 values to query for image languages.\n    - language (str): The language code for the response.\n\n    Returns:\n    - dict: A JSON response containing images of the TV series if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {}\n    if include_image_language:\n        params['include_image_language'] = include_image_language\n    if language:\n        params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the images that belong to a TV series. To use this API, you need to know the series_id of the TV series. This API should be used after retrieving the details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves image data for a specified TV series by accepting a series ID and returns arrays of backdrops, logos, and posters associated with that series."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}/images",
        "description": "Get the images that belong to a TV season.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "include_image_language",
                "in": "query",
                "description": "specify a comma separated list of ISO-639-1 values to query, for example: `en,null`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 3624,
                    "default": 0
                },
                "posters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 0.667,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 1500,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "en"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.514,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 18,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 1000,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 3624,
            "posters": [
                {
                    "aspect_ratio": 0.667,
                    "height": 1500,
                    "iso_639_1": "en",
                    "file_path": "/wgfKiqzuMrFIkU1M68DDDY8kGC1.jpg",
                    "vote_average": 5.514,
                    "vote_count": 18,
                    "width": 1000
                }
            ]
        },
        "code": "import requests\n\ndef get_season_images(series_id, season_number, include_image_language=None, language=None):\n    '''\n    Fetches images for a specific season of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number for which to fetch images. This is a required parameter.\n    - include_image_language (str, optional): A comma-separated list of ISO-639-1 values to query for image languages.\n    - language (str, optional): The language code for the response.\n\n    Returns:\n    - dict: A JSON response containing the images for the specified season if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    \n    # Prepare query parameters\n    params = {}\n    if include_image_language:\n        params['include_image_language'] = include_image_language\n    if language:\n        params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the images that are associated with a specific TV season. To use this API, you need to know the series_id and season_number. This API should be utilized following the retrieval of TV show details using /3/tv/{series_id}.",
        "functionality": "This API retrieves images for a specified TV season by accepting a series ID and a season number, returning a list of associated poster images."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images",
        "description": "Get the images that belong to a TV episode.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "include_image_language",
                "in": "query",
                "description": "specify a comma separated list of ISO-639-1 values to query, for example: `en,null`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "episode_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 63056,
                    "default": 0
                },
                "stills": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 1.778,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 1080,
                                "default": 0
                            },
                            "iso_639_1": {},
                            "file_path": {
                                "type": "string",
                                "example": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.454,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 3,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 1920,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 63056,
            "stills": [
                {
                    "aspect_ratio": 1.778,
                    "height": 1080,
                    "iso_639_1": null,
                    "file_path": "/9hGF3WUkBf7cSjMg0cdMDHJkByd.jpg",
                    "vote_average": 5.454,
                    "vote_count": 3,
                    "width": 1920
                }
            ]
        },
        "code": "import requests\n\ndef get_episode_images(series_id, season_number, episode_number, include_image_language=None, language=None):\n    '''\n    Fetches images for a specific episode of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number of the episode. This is a required parameter.\n    - episode_number (int): The episode number within the season. This is a required parameter.\n    - include_image_language (str, optional): A comma-separated list of ISO-639-1 values to query for image languages.\n    - language (str, optional): The language code for the response.\n\n    Returns:\n    - dict: A JSON response containing episode images if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    \n    # Prepare query parameters\n    params = {}\n    if include_image_language:\n        params['include_image_language'] = include_image_language\n    if language:\n        params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the images associated with a specific TV episode. To utilize this API, you need to provide the series_id, season_number, and episode_number. It is recommended to use this API after querying the details of a TV show using /3/tv/{series_id} and then navigating to the desired season and episode.",
        "functionality": "This API retrieves images for a specific episode of a TV series by taking the series ID, season number, and episode number as input parameters, and returns a list of still images associated with that episode."
    },
    {
        "path": "/3/trending/all/{time_window}",
        "description": "Get the trending movies, TV shows and people.",
        "parameters": [
            {
                "name": "time_window",
                "in": "path",
                "schema": {
                    "type": "string",
                    "enum": [
                        "day",
                        "week"
                    ],
                    "default": "day"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "description": "`ISO-639-1`-`ISO-3166-1` code",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/44immBwzhDVyjn87b3x3l9mlhAD.jpg"
                            },
                            "id": {
                                "type": "integer",
                                "example": 934433,
                                "default": 0
                            },
                            "title": {
                                "type": "string",
                                "example": "Scream VI"
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Scream VI"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter."
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/wDWwtvkRRlgTiUr6TyLSMX8FCuZ.jpg"
                            },
                            "media_type": {
                                "type": "string",
                                "example": "movie"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 27,
                                    "default": 0
                                }
                            },
                            "popularity": {
                                "type": "number",
                                "example": 609.941,
                                "default": 0
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2023-03-08"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 7.374,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 684,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1000,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 20000,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/44immBwzhDVyjn87b3x3l9mlhAD.jpg",
                    "id": 934433,
                    "title": "Scream VI",
                    "original_language": "en",
                    "original_title": "Scream VI",
                    "overview": "Following the latest Ghostface killings, the four survivors leave Woodsboro behind and start a fresh chapter.",
                    "poster_path": "/wDWwtvkRRlgTiUr6TyLSMX8FCuZ.jpg",
                    "media_type": "movie",
                    "genre_ids": [
                        27
                    ],
                    "popularity": 609.941,
                    "release_date": "2023-03-08",
                    "video": false,
                    "vote_average": 7.374,
                    "vote_count": 684
                }
            ],
            "total_pages": 1000,
            "total_results": 20000
        },
        "code": "import requests\n\ndef get_trending_content(time_window, language=\"en-US\"):\n    '''\n    Fetches the trending content for a specified time window.\n\n    Parameters:\n    - time_window (str): The time window for trending content. Must be either \"day\" or \"week\". This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing trending content if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/trending/all/{time_window}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the trending movies, TV shows, and people based on the specified time window. This API provides a comprehensive view of the current trends across different media types. It can be used to stay updated on popular content and personalities in the entertainment industry.",
        "functionality": "This API retrieves a list of trending movies, TV shows, and people for a specified time window, accepting a time window parameter and returning details such as titles, overviews, and ratings of the trending content."
    },
    {
        "path": "/3/movie/{movie_id}/credits",
        "description": "",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 819,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Edward Norton"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Edward Norton"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 26.99,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg"
                            },
                            "cast_id": {
                                "type": "integer",
                                "example": 4,
                                "default": 0
                            },
                            "character": {
                                "type": "string",
                                "example": "The Narrator"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "52fe4250c3a36847f80149f3"
                            },
                            "order": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 376,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "name": {
                                "type": "string",
                                "example": "Arnon Milchan"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Arnon Milchan"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 2.931,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/b2hBExX4NnczNAnLuTBF4kmNhZm.jpg"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "55731b8192514111610027d7"
                            },
                            "department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "job": {
                                "type": "string",
                                "example": "Executive Producer"
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 550,
            "cast": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 819,
                    "known_for_department": "Acting",
                    "name": "Edward Norton",
                    "original_name": "Edward Norton",
                    "popularity": 26.99,
                    "profile_path": "/8nytsqL59SFJTVYVrN72k6qkGgJ.jpg",
                    "cast_id": 4,
                    "character": "The Narrator",
                    "credit_id": "52fe4250c3a36847f80149f3",
                    "order": 0
                }
            ],
            "crew": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 376,
                    "known_for_department": "Production",
                    "name": "Arnon Milchan",
                    "original_name": "Arnon Milchan",
                    "popularity": 2.931,
                    "profile_path": "/b2hBExX4NnczNAnLuTBF4kmNhZm.jpg",
                    "credit_id": "55731b8192514111610027d7",
                    "department": "Production",
                    "job": "Executive Producer"
                }
            ]
        },
        "code": "import requests\n\ndef get_movie_credits(movie_id, language=\"en-US\"):\n    '''\n    Fetches the credits (cast and crew) for the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to fetch credits. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the movie credits if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the credits for a movie by its ID. To use this API, you need to know the movie_id and can retrieve the credits information after searching for a movie using /3/search/movie.",
        "functionality": "This API retrieves the cast and crew details of a specified movie by accepting a movie ID and returns the associated cast and crew information."
    },
    {
        "path": "/3/movie/{movie_id}/keywords",
        "description": "",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "string"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 818,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "based on novel or book"
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 550,
            "keywords": [
                {
                    "id": 818,
                    "name": "based on novel or book"
                }
            ]
        },
        "code": "import requests\n\ndef get_movie_keywords(movie_id):\n    '''\n    Fetches a list of keywords associated with the specified movie.\n\n    Parameters:\n    - movie_id (str): The ID of the movie for which to retrieve keywords. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing keywords if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/keywords\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the keywords that have been added to a movie. You should first know the movie_id and thus this API should be used after /3/search/movie.",
        "functionality": "This API retrieves keyword information for a specified movie by accepting a movie ID and returns a list of keywords associated with that movie."
    },
    {
        "path": "/3/movie/{movie_id}/recommendations",
        "description": "",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {}
        },
        "response_example": {},
        "code": "import requests\n\ndef get_movie_recommendations(movie_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of recommended movies based on the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to find recommendations. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing recommended movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/recommendations\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the recommended movies based on a specific movie. To use this API, you need to know the movie_id of the movie for which you want recommendations. This API should be used after retrieving the movie_id through the /3/search/movie API.",
        "functionality": "This API retrieves movie recommendations for a specified movie by accepting a movie ID and returns a list of recommended movies."
    },
    {
        "path": "/3/movie/{movie_id}/release_dates",
        "description": "Get the release dates and certifications for a movie.",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "iso_3166_1": {
                                "type": "string",
                                "example": "BG"
                            },
                            "release_dates": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "certification": {
                                            "type": "string",
                                            "example": "c"
                                        },
                                        "descriptors": {
                                            "type": "array"
                                        },
                                        "iso_639_1": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "note": {
                                            "type": "string",
                                            "example": ""
                                        },
                                        "release_date": {
                                            "type": "string",
                                            "example": "2012-08-28T00:00:00.000Z"
                                        },
                                        "type": {
                                            "type": "integer",
                                            "example": 3,
                                            "default": 0
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 550,
            "results": [
                {
                    "iso_3166_1": "BG",
                    "release_dates": [
                        {
                            "certification": "c",
                            "descriptors": [],
                            "iso_639_1": "",
                            "note": "",
                            "release_date": "2012-08-28T00:00:00.000Z",
                            "type": 3
                        }
                    ]
                }
            ]
        },
        "code": "import requests\n\ndef get_movie_release_dates(movie_id):\n    '''\n    Fetches the release dates for the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to retrieve release dates. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing the release dates if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/release_dates\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the release dates and certifications for a movie. To use this API, you need to know the movie_id. This API should be used after searching for a movie using the /3/search/movie endpoint.",
        "functionality": "This API retrieves release dates and certification information for a specified movie by accepting a movie ID and returns a list of release dates along with their certifications by country."
    },
    {
        "path": "/3/movie/{movie_id}/reviews",
        "description": "Get the user reviews for a movie.",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 550,
                    "default": 0
                },
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "author": {
                                "type": "string",
                                "example": "Goddard"
                            },
                            "author_details": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": ""
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "Goddard"
                                    },
                                    "avatar_path": {
                                        "type": "string",
                                        "example": "/https://secure.gravatar.com/avatar/f248ec34f953bc62cafcbdd81fddd6b6.jpg"
                                    },
                                    "rating": {}
                                }
                            },
                            "content": {
                                "type": "string",
                                "example": "Pretty awesome movie.  It shows what one crazy person can convince other crazy people to do.  Everyone needs something to believe in.  I recommend Jesus Christ, but they want Tyler Durden."
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2018-06-09T17:51:53.359Z"
                            },
                            "id": {
                                "type": "string",
                                "example": "5b1c13b9c3a36848f2026384"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2021-06-23T15:58:09.421Z"
                            },
                            "url": {
                                "type": "string",
                                "example": "https://www.themoviedb.org/review/5b1c13b9c3a36848f2026384"
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 8,
                    "default": 0
                }
            }
        },
        "response_example": {
            "id": 550,
            "page": 1,
            "results": [
                {
                    "author": "Goddard",
                    "author_details": {
                        "name": "",
                        "username": "Goddard",
                        "avatar_path": "/https://secure.gravatar.com/avatar/f248ec34f953bc62cafcbdd81fddd6b6.jpg",
                        "rating": null
                    },
                    "content": "Pretty awesome movie.  It shows what one crazy person can convince other crazy people to do.  Everyone needs something to believe in.  I recommend Jesus Christ, but they want Tyler Durden.",
                    "created_at": "2018-06-09T17:51:53.359Z",
                    "id": "5b1c13b9c3a36848f2026384",
                    "updated_at": "2021-06-23T15:58:09.421Z",
                    "url": "https://www.themoviedb.org/review/5b1c13b9c3a36848f2026384"
                }
            ],
            "total_pages": 1,
            "total_results": 8
        },
        "code": "import requests\n\ndef get_movie_reviews(movie_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of reviews for the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to fetch reviews. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing movie reviews if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/reviews\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the user reviews that have been added to a movie. To utilize this API, you need to have the movie_id available. This API should be used following a search for the movie using the /3/search/movie endpoint.",
        "functionality": "This API retrieves user reviews for a specified movie by accepting a movie ID and returns a list of reviews, including details such as the author's name, review content, and publication date."
    },
    {
        "path": "/3/movie/{movie_id}/similar",
        "description": "Get the similar movies based on genres and keywords.",
        "parameters": [
            {
                "name": "movie_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/3YAldML4EDyoC6RBpzceALigrAZ.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 9300,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Orlando"
                            },
                            "overview": {
                                "type": "string",
                                "example": "England, 1600. Queen Elizabeth I promises Orlando, a young nobleman obsessed with poetry, that she will grant him land and fortune if he agrees to satisfy a very particular request."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 7.768,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/xvz0qZkXXMq3dH2Revxii8drxWc.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "1992-12-11"
                            },
                            "title": {
                                "type": "string",
                                "example": "Orlando"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 6.966,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 262,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 364,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 7269,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/3YAldML4EDyoC6RBpzceALigrAZ.jpg",
                    "genre_ids": [
                        18
                    ],
                    "id": 9300,
                    "original_language": "en",
                    "original_title": "Orlando",
                    "overview": "England, 1600. Queen Elizabeth I promises Orlando, a young nobleman obsessed with poetry, that she will grant him land and fortune if he agrees to satisfy a very particular request.",
                    "popularity": 7.768,
                    "poster_path": "/xvz0qZkXXMq3dH2Revxii8drxWc.jpg",
                    "release_date": "1992-12-11",
                    "title": "Orlando",
                    "video": false,
                    "vote_average": 6.966,
                    "vote_count": 262
                }
            ],
            "total_pages": 364,
            "total_results": 7269
        },
        "code": "import requests\n\ndef get_similar_movies(movie_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of movies similar to the specified movie.\n\n    Parameters:\n    - movie_id (int): The ID of the movie for which to find similar movies. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing similar movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/movie/{movie_id}/similar\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the list of movies similar to a specific movie based on genres and keywords. To use this API, you need to provide the movie_id of the movie you are interested in. This API can be helpful for recommending similar movies to users based on their preferences.",
        "functionality": "This API retrieves a list of movies similar to a specified movie by accepting a movie ID and returns details such as title, overview, and popularity of those similar movies."
    },
    {
        "path": "/3/person/{person_id}",
        "description": "Query the top level details of a person.",
        "parameters": [
            {
                "name": "person_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "append_to_response",
                "in": "query",
                "description": "comma separated list of endpoints within this namespace, 20 items max",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "also_known_as": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Thomas Jeffrey Hanks"
                    }
                },
                "biography": {
                    "type": "string",
                    "example": "Thomas Jeffrey Hanks (born July 9, 1956) is an American actor and filmmaker. Known for both his comedic and dramatic roles, Hanks is one of the most popular and recognizable film stars worldwide, and is widely regarded as an American cultural icon.\n\nHanks made his breakthrough with leading roles in the comedies Splash (1984) and Big (1988). He won two consecutive Academy Awards for Best Actor for starring as a gay lawyer suffering from AIDS in Philadelphia (1993) and a young man with below-average IQ in Forrest Gump (1994). Hanks collaborated with film director Steven Spielberg on five films: Saving Private Ryan (1998), Catch Me If You Can (2002), The Terminal (2004), Bridge of Spies (2015), and The Post (2017), as well as the 2001 miniseries Band of Brothers, which launched him as a director, producer, and screenwriter.\n\nHanks' other notable films include the romantic comedies Sleepless in Seattle (1993) and You've Got Mail (1998); the dramas Apollo 13 (1995), The Green Mile (1999), Cast Away (2000), Road to Perdition (2002), and Cloud Atlas (2012); and the biographical dramas Saving Mr. Banks (2013), Captain Phillips (2013), Sully (2016), and A Beautiful Day in the Neighborhood (2019). He has also appeared as the title character in the Robert Langdon film series, and has voiced Sheriff Woody in the Toy Story film series.\n\nDescription above from the Wikipedia article Tom Hanks, licensed under CC-BY-SA, full list of contributors on Wikipedia."
                },
                "birthday": {
                    "type": "string",
                    "example": "1956-07-09"
                },
                "deathday": {},
                "gender": {
                    "type": "integer",
                    "example": 2,
                    "default": 0
                },
                "homepage": {},
                "id": {
                    "type": "integer",
                    "example": 31,
                    "default": 0
                },
                "imdb_id": {
                    "type": "string",
                    "example": "nm0000158"
                },
                "known_for_department": {
                    "type": "string",
                    "example": "Acting"
                },
                "name": {
                    "type": "string",
                    "example": "Tom Hanks"
                },
                "place_of_birth": {
                    "type": "string",
                    "example": "Concord, California, USA"
                },
                "popularity": {
                    "type": "number",
                    "example": 82.989,
                    "default": 0
                },
                "profile_path": {
                    "type": "string",
                    "example": "/xndWFsBlClOJFRdhSt4NBwiPq2o.jpg"
                }
            }
        },
        "response_example": {
            "adult": false,
            "also_known_as": [
                "Thomas Jeffrey Hanks"
            ],
            "biography": "Thomas Jeffrey Hanks (born July 9, 1956) is an American actor and filmmaker. Known for both his comedic and dramatic roles, Hanks is one of the most popular and recognizable film stars worldwide, and is widely regarded as an American cultural icon.\n\nHanks made his breakthrough with leading roles in the comedies Splash (1984) and Big (1988). He won two consecutive Academy Awards for Best Actor for starring as a gay lawyer suffering from AIDS in Philadelphia (1993) and a young man with below-average IQ in Forrest Gump (1994). Hanks collaborated with film director Steven Spielberg on five films: Saving Private Ryan (1998), Catch Me If You Can (2002), The Terminal (2004), Bridge of Spies (2015), and The Post (2017), as well as the 2001 miniseries Band of Brothers, which launched him as a director, producer, and screenwriter.\n\nHanks' other notable films include the romantic comedies Sleepless in Seattle (1993) and You've Got Mail (1998); the dramas Apollo 13 (1995), The Green Mile (1999), Cast Away (2000), Road to Perdition (2002), and Cloud Atlas (2012); and the biographical dramas Saving Mr. Banks (2013), Captain Phillips (2013), Sully (2016), and A Beautiful Day in the Neighborhood (2019). He has also appeared as the title character in the Robert Langdon film series, and has voiced Sheriff Woody in the Toy Story film series.\n\nDescription above from the Wikipedia article Tom Hanks, licensed under CC-BY-SA, full list of contributors on Wikipedia.",
            "birthday": "1956-07-09",
            "deathday": null,
            "gender": 2,
            "homepage": null,
            "id": 31,
            "imdb_id": "nm0000158",
            "known_for_department": "Acting",
            "name": "Tom Hanks",
            "place_of_birth": "Concord, California, USA",
            "popularity": 82.989,
            "profile_path": "/xndWFsBlClOJFRdhSt4NBwiPq2o.jpg"
        },
        "code": "import requests\n\ndef get_person_details(person_id, append_to_response=None, language=\"en-US\"):\n    '''\n    Fetches details about a specific person from the API.\n\n    Parameters:\n    - person_id (int): The ID of the person to retrieve details for. This is a required parameter.\n    - append_to_response (str): A comma-separated list of additional endpoints to include in the response (optional).\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the person's details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/person/{person_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {\n        \"append_to_response\": append_to_response,\n        \"language\": language\n    }\n    \n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Query the top level details of a person. To use this API, you need to know the person_id. This API provides comprehensive information about a specific person in the database.",
        "functionality": "This API retrieves detailed information about a specified person by accepting a person ID and returns the person's name, biography, birthday, gender, and other key attributes."
    },
    {
        "path": "/3/person/{person_id}/images",
        "description": "Get the profile images that belong to a person.",
        "parameters": [
            {
                "name": "person_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 287,
                    "default": 0
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 0.666,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 980,
                                "default": 0
                            },
                            "iso_639_1": {},
                            "file_path": {
                                "type": "string",
                                "example": "/cckcYc2v0yh1tc9QjRelptcOBko.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.288,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 89,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 653,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 287,
            "profiles": [
                {
                    "aspect_ratio": 0.666,
                    "height": 980,
                    "iso_639_1": null,
                    "file_path": "/cckcYc2v0yh1tc9QjRelptcOBko.jpg",
                    "vote_average": 5.288,
                    "vote_count": 89,
                    "width": 653
                }
            ]
        },
        "code": "import requests\n\ndef get_person_images(person_id):\n    '''\n    Fetches a list of images for the specified person.\n\n    Parameters:\n    - person_id (int): The ID of the person for whom to fetch images. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing images of the person if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the profile images that belong to a specific person identified by their person_id. To use this API, you need to know the person_id beforehand, which can be obtained through other person-related APIs such as /3/person/{person_id}.",
        "functionality": "This API retrieves profile images for a specified person by accepting a person ID and returns a list of image profiles associated with that person."
    },
    {
        "path": "/3/person/{person_id}/movie_credits",
        "description": "Get the movie credits for a person.",
        "parameters": [
            {
                "name": "person_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 35,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 13,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Forrest Gump"
                            },
                            "overview": {
                                "type": "string",
                                "example": "A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 62.225,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "1994-06-23"
                            },
                            "title": {
                                "type": "string",
                                "example": "Forrest Gump"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.481,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 24535,
                                "default": 0
                            },
                            "character": {
                                "type": "string",
                                "example": "Forrest Gump"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "52fe420ec3a36847f800074f"
                            },
                            "order": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/tx3uj8GPWf5pzb0gWATJ4bokNHI.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 99,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 87061,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "fr"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Le Voyage extraordinaire"
                            },
                            "overview": {
                                "type": "string",
                                "example": "An account of the extraordinary life of film pioneer Georges M\u00e9li\u00e8s (1861-1938) and the amazing story of the copy in color of his masterpiece \u201cA Trip to the Moon\u201d (1902), unexpectedly found in Spain and restored thanks to the heroic efforts of a group of true cinema lovers."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 6.007,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/zHNNT9gfiGsuadR6x38KYOp6ekq.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2011-12-08"
                            },
                            "title": {
                                "type": "string",
                                "example": "The Extraordinary Voyage"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 7.6,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 47,
                                "default": 0
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5d818a63d34eb3002c4f8fea"
                            },
                            "department": {
                                "type": "string",
                                "example": "Crew"
                            },
                            "job": {
                                "type": "string",
                                "example": "Thanks"
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 31,
                    "default": 0
                }
            }
        },
        "response_example": {
            "cast": [
                {
                    "adult": false,
                    "backdrop_path": "/3h1JZGDhZ8nzxdgvkxha0qBqi05.jpg",
                    "genre_ids": [
                        35
                    ],
                    "id": 13,
                    "original_language": "en",
                    "original_title": "Forrest Gump",
                    "overview": "A man with a low IQ has accomplished great things in his life and been present during significant historic events\u2014in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.",
                    "popularity": 62.225,
                    "poster_path": "/arw2vcBveWOVZr6pxd9XTd1TdQa.jpg",
                    "release_date": "1994-06-23",
                    "title": "Forrest Gump",
                    "video": false,
                    "vote_average": 8.481,
                    "vote_count": 24535,
                    "character": "Forrest Gump",
                    "credit_id": "52fe420ec3a36847f800074f",
                    "order": 0
                }
            ],
            "crew": [
                {
                    "adult": false,
                    "backdrop_path": "/tx3uj8GPWf5pzb0gWATJ4bokNHI.jpg",
                    "genre_ids": [
                        99
                    ],
                    "id": 87061,
                    "original_language": "fr",
                    "original_title": "Le Voyage extraordinaire",
                    "overview": "An account of the extraordinary life of film pioneer Georges M\u00e9li\u00e8s (1861-1938) and the amazing story of the copy in color of his masterpiece \u201cA Trip to the Moon\u201d (1902), unexpectedly found in Spain and restored thanks to the heroic efforts of a group of true cinema lovers.",
                    "popularity": 6.007,
                    "poster_path": "/zHNNT9gfiGsuadR6x38KYOp6ekq.jpg",
                    "release_date": "2011-12-08",
                    "title": "The Extraordinary Voyage",
                    "video": false,
                    "vote_average": 7.6,
                    "vote_count": 47,
                    "credit_id": "5d818a63d34eb3002c4f8fea",
                    "department": "Crew",
                    "job": "Thanks"
                }
            ],
            "id": 31
        },
        "code": "import requests\n\ndef get_person_movie_credits(person_id, language=\"en-US\"):\n    '''\n    Fetches the movie credits for a specified person.\n\n    Parameters:\n    - person_id (int): The ID of the person for whom to fetch movie credits. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the movie credits if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/movie_credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the movie credits that belong to a specific person identified by their person_id. This API provides information about the movies the person has been credited in. To use this API effectively, you need to know the person_id beforehand. It is recommended to retrieve the person_id through the /3/search/person API.",
        "functionality": "This API retrieves the movie credits for a specified person by accepting a person ID and returns a list of cast and crew credits associated with that person."
    },
    {
        "path": "/3/person/{person_id}/tv_credits",
        "description": "Get the TV credits that belong to a person.",
        "parameters": [
            {
                "name": "person_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/ttvojTMgaIN7U8gqB5LlNqO4vPN.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 10767,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 1900,
                                "default": 0
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "US"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "LIVE with Kelly and Mark"
                            },
                            "overview": {
                                "type": "string",
                                "example": "A morning talk show with A-list celebrity guests, top-notch performances and one-of-a-kind segments that are unrivaled on daytime television, plus spontaneous, hilarious and unpredictable talk."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 700.508,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/l5y8egG27p2fSTyq8s21SQMmQLy.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "1988-09-05"
                            },
                            "name": {
                                "type": "string",
                                "example": "LIVE with Kelly and Mark"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.4,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 25,
                                "default": 0
                            },
                            "character": {
                                "type": "string",
                                "example": ""
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "52571af019c29571140d5c92"
                            },
                            "episode_count": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/6uMA6EAiwcsCqQJwWgYwtORvE0v.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 35,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 2391,
                                "default": 0
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "US"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Tales from the Crypt"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Cadaverous scream legend the Crypt Keeper is your macabre host for these forays of fright and fun based on the classic E.C. Comics tales from back in the day. So shamble up to the bar and pick your poison. Will it be an insane Santa on a personal slay ride? Honeymooners out to fulfill the \"til death do we part\" vow ASAP?"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 24.88,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/dDfXQH6Kg2JNASI0dqNALukjhk1.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "1989-06-10"
                            },
                            "name": {
                                "type": "string",
                                "example": "Tales from the Crypt"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 7.978,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 757,
                                "default": 0
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "525734f3760ee3776a397211"
                            },
                            "department": {
                                "type": "string",
                                "example": "Directing"
                            },
                            "episode_count": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "job": {
                                "type": "string",
                                "example": "Director"
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 31,
                    "default": 0
                }
            }
        },
        "response_example": {
            "cast": [
                {
                    "adult": false,
                    "backdrop_path": "/ttvojTMgaIN7U8gqB5LlNqO4vPN.jpg",
                    "genre_ids": [
                        10767
                    ],
                    "id": 1900,
                    "origin_country": [
                        "US"
                    ],
                    "original_language": "en",
                    "original_name": "LIVE with Kelly and Mark",
                    "overview": "A morning talk show with A-list celebrity guests, top-notch performances and one-of-a-kind segments that are unrivaled on daytime television, plus spontaneous, hilarious and unpredictable talk.",
                    "popularity": 700.508,
                    "poster_path": "/l5y8egG27p2fSTyq8s21SQMmQLy.jpg",
                    "first_air_date": "1988-09-05",
                    "name": "LIVE with Kelly and Mark",
                    "vote_average": 5.4,
                    "vote_count": 25,
                    "character": "",
                    "credit_id": "52571af019c29571140d5c92",
                    "episode_count": 1
                }
            ],
            "crew": [
                {
                    "adult": false,
                    "backdrop_path": "/6uMA6EAiwcsCqQJwWgYwtORvE0v.jpg",
                    "genre_ids": [
                        35
                    ],
                    "id": 2391,
                    "origin_country": [
                        "US"
                    ],
                    "original_language": "en",
                    "original_name": "Tales from the Crypt",
                    "overview": "Cadaverous scream legend the Crypt Keeper is your macabre host for these forays of fright and fun based on the classic E.C. Comics tales from back in the day. So shamble up to the bar and pick your poison. Will it be an insane Santa on a personal slay ride? Honeymooners out to fulfill the \"til death do we part\" vow ASAP?",
                    "popularity": 24.88,
                    "poster_path": "/dDfXQH6Kg2JNASI0dqNALukjhk1.jpg",
                    "first_air_date": "1989-06-10",
                    "name": "Tales from the Crypt",
                    "vote_average": 7.978,
                    "vote_count": 757,
                    "credit_id": "525734f3760ee3776a397211",
                    "department": "Directing",
                    "episode_count": 1,
                    "job": "Director"
                }
            ],
            "id": 31
        },
        "code": "import requests\n\ndef get_tv_credits(person_id, language=\"en-US\"):\n    '''\n    Fetches the TV credits for a specified person.\n\n    Parameters:\n    - person_id (int): The ID of the person for whom to fetch TV credits. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the TV credits if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/person/{person_id}/tv_credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the TV credits that belong to a specific person identified by their person_id. This API should be used to retrieve information about the TV shows the person has been credited in.",
        "functionality": "This API retrieves the TV credits for a specified person by accepting a person ID and returns a list of both cast and crew roles associated with that person."
    },
    {
        "path": "/3/person/popular",
        "description": "Get a list of people ordered by popularity.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 224513,
                                "default": 0
                            },
                            "known_for": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "adult": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "backdrop_path": {
                                            "type": "string",
                                            "example": "/ilRyazdMJwN05exqhwK4tMKBYZs.jpg"
                                        },
                                        "genre_ids": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer",
                                                "example": 878,
                                                "default": 0
                                            }
                                        },
                                        "id": {
                                            "type": "integer",
                                            "example": 335984,
                                            "default": 0
                                        },
                                        "media_type": {
                                            "type": "string",
                                            "example": "movie"
                                        },
                                        "original_language": {
                                            "type": "string",
                                            "example": "en"
                                        },
                                        "original_title": {
                                            "type": "string",
                                            "example": "Blade Runner 2049"
                                        },
                                        "overview": {
                                            "type": "string",
                                            "example": "Thirty years after the events of the first film, a new blade runner, LAPD Officer K, unearths a long-buried secret that has the potential to plunge what's left of society into chaos. K's discovery leads him on a quest to find Rick Deckard, a former LAPD blade runner who has been missing for 30 years."
                                        },
                                        "poster_path": {
                                            "type": "string",
                                            "example": "/gajva2L0rPYkEWjzgFlBXCAVBE5.jpg"
                                        },
                                        "release_date": {
                                            "type": "string",
                                            "example": "2017-10-04"
                                        },
                                        "title": {
                                            "type": "string",
                                            "example": "Blade Runner 2049"
                                        },
                                        "video": {
                                            "type": "boolean",
                                            "example": false,
                                            "default": true
                                        },
                                        "vote_average": {
                                            "type": "number",
                                            "example": 7.5,
                                            "default": 0
                                        },
                                        "vote_count": {
                                            "type": "integer",
                                            "example": 11771,
                                            "default": 0
                                        }
                                    }
                                }
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Ana de Armas"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 343.33,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/3vxvsmYLTf4jnr163SUlBIw51ee.jpg"
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 500,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 10000,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "gender": 1,
                    "id": 224513,
                    "known_for": [
                        {
                            "adult": false,
                            "backdrop_path": "/ilRyazdMJwN05exqhwK4tMKBYZs.jpg",
                            "genre_ids": [
                                878
                            ],
                            "id": 335984,
                            "media_type": "movie",
                            "original_language": "en",
                            "original_title": "Blade Runner 2049",
                            "overview": "Thirty years after the events of the first film, a new blade runner, LAPD Officer K, unearths a long-buried secret that has the potential to plunge what's left of society into chaos. K's discovery leads him on a quest to find Rick Deckard, a former LAPD blade runner who has been missing for 30 years.",
                            "poster_path": "/gajva2L0rPYkEWjzgFlBXCAVBE5.jpg",
                            "release_date": "2017-10-04",
                            "title": "Blade Runner 2049",
                            "video": false,
                            "vote_average": 7.5,
                            "vote_count": 11771
                        }
                    ],
                    "known_for_department": "Acting",
                    "name": "Ana de Armas",
                    "popularity": 343.33,
                    "profile_path": "/3vxvsmYLTf4jnr163SUlBIw51ee.jpg"
                }
            ],
            "total_pages": 500,
            "total_results": 10000
        },
        "code": "import requests\n\ndef get_popular_people(language=\"en-US\", page=1):\n    '''\n    Fetches a list of popular people from the API.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing popular people if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/person/popular\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of people ordered by popularity. This API can be used to retrieve popular people on TMDB.",
        "functionality": "This API retrieves a list of popular people by accepting optional parameters for language and page, and returns details including the person's ID, name, and popularity, along with a list of their known works."
    },
    {
        "path": "/3/movie/popular",
        "description": "Get a list of movies ordered by popularity.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "description": "ISO-3166-1 code",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/gMJngTNfaqCSCqGD4y8lVMZXKDn.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 28,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 640146,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Ant-Man and the Wasp: Quantumania"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 8567.865,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2023-02-15"
                            },
                            "title": {
                                "type": "string",
                                "example": "Ant-Man and the Wasp: Quantumania"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 6.5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 1886,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 38029,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 760569,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/gMJngTNfaqCSCqGD4y8lVMZXKDn.jpg",
                    "genre_ids": [
                        28
                    ],
                    "id": 640146,
                    "original_language": "en",
                    "original_title": "Ant-Man and the Wasp: Quantumania",
                    "overview": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible.",
                    "popularity": 8567.865,
                    "poster_path": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg",
                    "release_date": "2023-02-15",
                    "title": "Ant-Man and the Wasp: Quantumania",
                    "video": false,
                    "vote_average": 6.5,
                    "vote_count": 1886
                }
            ],
            "total_pages": 38029,
            "total_results": 760569
        },
        "code": "import requests\n\ndef get_popular_movies(language=\"en-US\", page=1, region=None):\n    '''\n    Fetches a list of popular movies.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): The ISO-3166-1 code for the region. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing popular movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/movie/popular\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page,\n        \"region\": region\n    }\n    # Remove the region parameter if it is None\n    if region is None:\n        params.pop(\"region\")\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of popular movies. This API provides a list of movies ordered by their popularity ranking. It can be used to retrieve trending movies and understand the current popular choices among users.",
        "functionality": "This API retrieves a list of popular movies, requiring optional parameters for language, page number, and region, and returns details such as movie titles, release dates, and popularity metrics."
    },
    {
        "path": "/3/movie/top_rated",
        "description": "Get a list of movies ordered by rating.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "description": "ISO-3166-1 code",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/tmU7GeKVybMWFButWEGl2M4GeiP.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 238,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "The Godfather"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Spanning the years 1945 to 1955, a chronicle of the fictional Italian-American Corleone crime family. When organized crime family patriarch, Vito Corleone barely survives an attempt on his life, his youngest son, Michael steps in to take care of the would-be killers, launching a campaign of bloody revenge."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 100.932,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/3bhkrj58Vtu7enYsRolD1fZdja1.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "1972-03-14"
                            },
                            "title": {
                                "type": "string",
                                "example": "The Godfather"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.7,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 17806,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 552,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 11032,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/tmU7GeKVybMWFButWEGl2M4GeiP.jpg",
                    "genre_ids": [
                        18
                    ],
                    "id": 238,
                    "original_language": "en",
                    "original_title": "The Godfather",
                    "overview": "Spanning the years 1945 to 1955, a chronicle of the fictional Italian-American Corleone crime family. When organized crime family patriarch, Vito Corleone barely survives an attempt on his life, his youngest son, Michael steps in to take care of the would-be killers, launching a campaign of bloody revenge.",
                    "popularity": 100.932,
                    "poster_path": "/3bhkrj58Vtu7enYsRolD1fZdja1.jpg",
                    "release_date": "1972-03-14",
                    "title": "The Godfather",
                    "video": false,
                    "vote_average": 8.7,
                    "vote_count": 17806
                }
            ],
            "total_pages": 552,
            "total_results": 11032
        },
        "code": "import requests\n\ndef get_top_rated_movies(language=\"en-US\", page=1, region=None):\n    '''\n    Fetches a list of top-rated movies.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): The ISO-3166-1 code for the region. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing top-rated movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/movie/top_rated\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page,\n        \"region\": region\n    }\n    # Remove the region parameter if it is None\n    if region is None:\n        params.pop(\"region\")\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of movies ordered by their rating. This API provides access to the top-rated movies. It can be used to retrieve a list of highly rated movies based on user ratings.",
        "functionality": "This API retrieves a list of top-rated movies by accepting optional parameters for language, page number, and region, and returns detailed information about each movie including title, overview, and ratings."
    },
    {
        "path": "/3/movie/upcoming",
        "description": "Get a list of movies that are being released soon.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "description": "ISO-3166-1 code",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "object",
                    "properties": {
                        "maximum": {
                            "type": "string",
                            "example": "2023-05-23"
                        },
                        "minimum": {
                            "type": "string",
                            "example": "2023-05-04"
                        }
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/7bWxAsNPv9CXHOhZbJVlj2KxgfP.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 27,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 713704,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Evil Dead Rise"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Two sisters find an ancient vinyl that gives birth to bloodthirsty demons that run amok in a Los Angeles apartment building and thrusts them into a primal battle for survival as they face the most nightmarish version of family imaginable."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 1696.367,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/mIBCtPvKZQlxubxKMeViO2UrP3q.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2023-04-12"
                            },
                            "title": {
                                "type": "string",
                                "example": "Evil Dead Rise"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 7,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 207,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 19,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 369,
                    "default": 0
                }
            }
        },
        "response_example": {
            "dates": {
                "maximum": "2023-05-23",
                "minimum": "2023-05-04"
            },
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/7bWxAsNPv9CXHOhZbJVlj2KxgfP.jpg",
                    "genre_ids": [
                        27
                    ],
                    "id": 713704,
                    "original_language": "en",
                    "original_title": "Evil Dead Rise",
                    "overview": "Two sisters find an ancient vinyl that gives birth to bloodthirsty demons that run amok in a Los Angeles apartment building and thrusts them into a primal battle for survival as they face the most nightmarish version of family imaginable.",
                    "popularity": 1696.367,
                    "poster_path": "/mIBCtPvKZQlxubxKMeViO2UrP3q.jpg",
                    "release_date": "2023-04-12",
                    "title": "Evil Dead Rise",
                    "video": false,
                    "vote_average": 7,
                    "vote_count": 207
                }
            ],
            "total_pages": 19,
            "total_results": 369
        },
        "code": "import requests\n\ndef get_upcoming_movies(language=\"en-US\", page=1, region=None):\n    '''\n    Fetches a list of upcoming movies.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): The ISO-3166-1 code for the region. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing upcoming movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/movie/upcoming\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page\n    }\n    if region:\n        params[\"region\"] = region\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of movies that are scheduled to be released soon. This API provides information on upcoming movies. To use this API effectively, you can retrieve the list of upcoming movies by calling /3/movie/upcoming.",
        "functionality": "This API retrieves a list of upcoming movie releases by accepting optional parameters for language, page number, and region, and returns details including release dates, movie titles, and their corresponding information."
    },
    {
        "path": "/3/movie/now_playing",
        "description": "Get a list of movies that are currently in theatres.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "description": "ISO-3166-1 code",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "dates": {
                    "type": "object",
                    "properties": {
                        "maximum": {
                            "type": "string",
                            "example": "2023-05-03"
                        },
                        "minimum": {
                            "type": "string",
                            "example": "2023-03-16"
                        }
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/iJQIbOPm81fPEGKt5BPuZmfnA54.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 16,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 502356,
                                "default": 0
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "The Super Mario Bros. Movie"
                            },
                            "overview": {
                                "type": "string",
                                "example": "While working underground to fix a water main, Brooklyn plumbers\u2014and brothers\u2014Mario and Luigi are transported down a mysterious pipe and wander into a magical new world. But when the brothers are separated, Mario embarks on an epic quest to find Luigi."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 6572.614,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/qNBAXBIQlnOThrVvA6mA2B5ggV6.jpg"
                            },
                            "release_date": {
                                "type": "string",
                                "example": "2023-04-05"
                            },
                            "title": {
                                "type": "string",
                                "example": "The Super Mario Bros. Movie"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 7.5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 1456,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 87,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1734,
                    "default": 0
                }
            }
        },
        "response_example": {
            "dates": {
                "maximum": "2023-05-03",
                "minimum": "2023-03-16"
            },
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/iJQIbOPm81fPEGKt5BPuZmfnA54.jpg",
                    "genre_ids": [
                        16
                    ],
                    "id": 502356,
                    "original_language": "en",
                    "original_title": "The Super Mario Bros. Movie",
                    "overview": "While working underground to fix a water main, Brooklyn plumbers\u2014and brothers\u2014Mario and Luigi are transported down a mysterious pipe and wander into a magical new world. But when the brothers are separated, Mario embarks on an epic quest to find Luigi.",
                    "popularity": 6572.614,
                    "poster_path": "/qNBAXBIQlnOThrVvA6mA2B5ggV6.jpg",
                    "release_date": "2023-04-05",
                    "title": "The Super Mario Bros. Movie",
                    "video": false,
                    "vote_average": 7.5,
                    "vote_count": 1456
                }
            ],
            "total_pages": 87,
            "total_results": 1734
        },
        "code": "import requests\n\ndef get_now_playing_movies(language=\"en-US\", page=1, region=None):\n    '''\n    Fetches a list of movies that are currently playing in theaters.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): The ISO-3166-1 code for the region. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing the list of now playing movies if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/movie/now_playing\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page\n    }\n    if region:\n        params[\"region\"] = region\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of movies that are currently playing in theaters. This API provides information on movies currently being shown in theaters. To use this API effectively, you can retrieve the list of movies currently in theaters by calling the /3/movie/now_playing endpoint.",
        "functionality": "This API retrieves a list of movies currently in theaters by accepting optional parameters for language, page number, and region, and returns movie details including titles, overviews, and release dates."
    },
    {
        "path": "/3/tv/airing_today",
        "description": "Get a list of TV shows airing today.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "timezone",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "backdrop_path": {
                                "type": "string",
                                "example": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2023-01-23"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 9648,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 202250,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "PH"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "tl"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "overview": {
                                "type": "string",
                                "example": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 2797.914,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg"
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 13,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 14,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 265,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg",
                    "first_air_date": "2023-01-23",
                    "genre_ids": [
                        9648
                    ],
                    "id": 202250,
                    "name": "Dirty Linen",
                    "origin_country": [
                        "PH"
                    ],
                    "original_language": "tl",
                    "original_name": "Dirty Linen",
                    "overview": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot.",
                    "popularity": 2797.914,
                    "poster_path": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg",
                    "vote_average": 5,
                    "vote_count": 13
                }
            ],
            "total_pages": 14,
            "total_results": 265
        },
        "code": "import requests\n\ndef get_airing_today_tv_shows(language=\"en-US\", page=1, timezone=None):\n    '''\n    Fetches a list of TV shows that are airing today.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - timezone (str): The timezone for the airing times. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing TV shows airing today if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/tv/airing_today\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page,\n        \"timezone\": timezone\n    }\n    # Remove the timezone parameter if it is None\n    if timezone is None:\n        params.pop(\"timezone\")\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of TV shows that are currently airing today. This API provides information on TV shows that are scheduled to be broadcast on the current day. It can be used to stay updated on the TV shows airing on the specific date.",
        "functionality": "This API retrieves a list of TV shows airing today by accepting optional parameters for language, page number, and timezone, and returns details including show IDs, names, and other metadata."
    },
    {
        "path": "/3/tv/on_the_air",
        "description": "Get a list of TV shows that air in the next 7 days.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "timezone",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "backdrop_path": {
                                "type": "string",
                                "example": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2023-01-23"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 9648,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 202250,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "PH"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "tl"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "overview": {
                                "type": "string",
                                "example": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 2797.914,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg"
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 13,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 58,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1151,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg",
                    "first_air_date": "2023-01-23",
                    "genre_ids": [
                        9648
                    ],
                    "id": 202250,
                    "name": "Dirty Linen",
                    "origin_country": [
                        "PH"
                    ],
                    "original_language": "tl",
                    "original_name": "Dirty Linen",
                    "overview": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot.",
                    "popularity": 2797.914,
                    "poster_path": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg",
                    "vote_average": 5,
                    "vote_count": 13
                }
            ],
            "total_pages": 58,
            "total_results": 1151
        },
        "code": "import requests\n\ndef get_tv_on_the_air(language=\"en-US\", page=1, timezone=None):\n    '''\n    Fetches a list of TV shows that are currently on the air.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - timezone (str): The timezone for the response. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing TV shows currently on the air if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/tv/on_the_air\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"language\": language,\n        \"page\": page,\n        \"timezone\": timezone\n    }\n    # Remove the timezone parameter if it is None\n    if timezone is None:\n        params.pop(\"timezone\")\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of TV shows that are currently on the air or will air in the next 7 days. This API provides information about TV shows that are currently being broadcasted or scheduled to air soon. It can be used to stay updated on the latest TV show schedules.",
        "functionality": "This API retrieves a list of TV shows that will air in the next 7 days by accepting optional parameters for language, page number, and timezone, and returns details about each show, including their ID, name, and overview."
    },
    {
        "path": "/3/tv/popular",
        "description": "Get a list of TV shows ordered by popularity.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "backdrop_path": {
                                "type": "string",
                                "example": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2023-01-23"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 9648,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 202250,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "PH"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "tl"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Dirty Linen"
                            },
                            "overview": {
                                "type": "string",
                                "example": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 2797.914,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg"
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 5,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 13,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 7416,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 148302,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/mAJ84W6I8I272Da87qplS2Dp9ST.jpg",
                    "first_air_date": "2023-01-23",
                    "genre_ids": [
                        9648
                    ],
                    "id": 202250,
                    "name": "Dirty Linen",
                    "origin_country": [
                        "PH"
                    ],
                    "original_language": "tl",
                    "original_name": "Dirty Linen",
                    "overview": "To exact vengeance, a young woman infiltrates the household of an influential family as a housemaid to expose their dirty secrets. However, love will get in the way of her revenge plot.",
                    "popularity": 2797.914,
                    "poster_path": "/aoAZgnmMzY9vVy9VWnO3U5PZENh.jpg",
                    "vote_average": 5,
                    "vote_count": 13
                }
            ],
            "total_pages": 7416,
            "total_results": 148302
        },
        "code": "import requests\n\ndef get_popular_tv_shows(language=\"en-US\", page=1):\n    '''\n    Fetches a list of popular TV shows.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing popular TV shows if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/tv/popular\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of popular TV shows. This API provides TV shows ordered by their popularity ranking. To access this information, you can directly call the /3/tv/popular endpoint.",
        "functionality": "This API retrieves a list of popular TV shows by accepting optional parameters for language and page number, and returns the results along with pagination information."
    },
    {
        "path": "/3/tv/top_rated",
        "description": "Get a list of TV shows ordered by rating.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "backdrop_path": {
                                "type": "string",
                                "example": "/99vBORZixICa32Pwdwj0lWcr8K.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2021-09-03"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 10764,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 130392,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "The D'Amelio Show"
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "US"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "The D'Amelio Show"
                            },
                            "overview": {
                                "type": "string",
                                "example": "From relative obscurity and a seemingly normal life, to overnight success and thrust into the Hollywood limelight overnight, the D\u2019Amelios are faced with new challenges and opportunities they could not have imagined."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 12.459,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/phv2Jc4H8cvRzvTKb9X1uKMboTu.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.9,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 3190,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 142,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 2833,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/99vBORZixICa32Pwdwj0lWcr8K.jpg",
                    "first_air_date": "2021-09-03",
                    "genre_ids": [
                        10764
                    ],
                    "id": 130392,
                    "name": "The D'Amelio Show",
                    "origin_country": [
                        "US"
                    ],
                    "original_language": "en",
                    "original_name": "The D'Amelio Show",
                    "overview": "From relative obscurity and a seemingly normal life, to overnight success and thrust into the Hollywood limelight overnight, the D\u2019Amelios are faced with new challenges and opportunities they could not have imagined.",
                    "popularity": 12.459,
                    "poster_path": "/phv2Jc4H8cvRzvTKb9X1uKMboTu.jpg",
                    "vote_average": 8.9,
                    "vote_count": 3190
                }
            ],
            "total_pages": 142,
            "total_results": 2833
        },
        "code": "import requests\n\ndef get_top_rated_tv_shows(language=\"en-US\", page=1):\n    '''\n    Fetches a list of top-rated TV shows.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing top-rated TV shows if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/tv/top_rated\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get a list of TV shows ordered by rating. This API provides a way to retrieve the top-rated TV shows. It can be useful for users looking for highly-rated TV content.",
        "functionality": "This API retrieves a list of top-rated TV shows by accepting optional parameters for language and page, returning details such as show IDs, names, ratings, and overview."
    },
    {
        "path": "/3/movie/latest",
        "description": "Get the newest movie ID.",
        "parameters": [],
        "schema": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "backdrop_path": {},
                "belongs_to_collection": {},
                "budget": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "genres": {
                    "type": "array"
                },
                "homepage": {
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "type": "integer",
                    "example": 1119232,
                    "default": 0
                },
                "imdb_id": {},
                "original_language": {
                    "type": "string",
                    "example": "fr"
                },
                "original_title": {
                    "type": "string",
                    "example": "K\u00f6nig Charles III"
                },
                "overview": {
                    "type": "string",
                    "example": ""
                },
                "popularity": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "poster_path": {},
                "production_companies": {
                    "type": "array"
                },
                "production_countries": {
                    "type": "array"
                },
                "release_date": {
                    "type": "string",
                    "example": ""
                },
                "revenue": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "runtime": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "spoken_languages": {
                    "type": "array"
                },
                "status": {
                    "type": "string",
                    "example": "Released"
                },
                "tagline": {
                    "type": "string",
                    "example": ""
                },
                "title": {
                    "type": "string",
                    "example": "K\u00f6nig Charles III"
                },
                "video": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "vote_average": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "vote_count": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                }
            }
        },
        "response_example": {
            "adult": false,
            "backdrop_path": null,
            "belongs_to_collection": null,
            "budget": 0,
            "genres": [],
            "homepage": "",
            "id": 1119232,
            "imdb_id": null,
            "original_language": "fr",
            "original_title": "K\u00f6nig Charles III",
            "overview": "",
            "popularity": 0.0,
            "poster_path": null,
            "production_companies": [],
            "production_countries": [],
            "release_date": "",
            "revenue": 0,
            "runtime": 0,
            "spoken_languages": [],
            "status": "Released",
            "tagline": "",
            "title": "K\u00f6nig Charles III",
            "video": false,
            "vote_average": 0.0,
            "vote_count": 0
        },
        "code": "import requests\n\ndef get_latest_movie():\n    '''\n    Fetches the latest movie information.\n\n    Returns:\n    - dict: A JSON response containing the latest movie details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/movie/latest\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the newest movie ID available in the database. This API can be used to retrieve the most recent movie ID for reference or further querying related movie details.",
        "functionality": "This API retrieves the latest movie's details, including its ID, title, release date, and other relevant information without requiring any input parameters."
    },
    {
        "path": "/3/tv/latest",
        "description": "Get the newest TV show ID.",
        "parameters": [],
        "schema": {
            "type": "object",
            "properties": {
                "adult": {
                    "type": "boolean",
                    "example": false,
                    "default": true
                },
                "backdrop_path": {},
                "created_by": {
                    "type": "array"
                },
                "episode_run_time": {
                    "type": "array"
                },
                "first_air_date": {
                    "type": "string",
                    "example": ""
                },
                "genres": {
                    "type": "array"
                },
                "homepage": {
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "type": "integer",
                    "example": 225491,
                    "default": 0
                },
                "in_production": {
                    "type": "boolean",
                    "example": true,
                    "default": true
                },
                "languages": {
                    "type": "array"
                },
                "last_air_date": {
                    "type": "string",
                    "example": "2023-04-21"
                },
                "last_episode_to_air": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "example": 4398801,
                            "default": 0
                        },
                        "name": {
                            "type": "string",
                            "example": "Episode 8"
                        },
                        "overview": {
                            "type": "string",
                            "example": ""
                        },
                        "vote_average": {
                            "type": "integer",
                            "example": 0,
                            "default": 0
                        },
                        "vote_count": {
                            "type": "integer",
                            "example": 0,
                            "default": 0
                        },
                        "air_date": {
                            "type": "string",
                            "example": "2023-04-21"
                        },
                        "episode_number": {
                            "type": "integer",
                            "example": 8,
                            "default": 0
                        },
                        "production_code": {
                            "type": "string",
                            "example": ""
                        },
                        "runtime": {},
                        "season_number": {
                            "type": "integer",
                            "example": 1,
                            "default": 0
                        },
                        "show_id": {
                            "type": "integer",
                            "example": 225491,
                            "default": 0
                        },
                        "still_path": {}
                    }
                },
                "name": {
                    "type": "string",
                    "example": "\u5996\u602a\u4f20"
                },
                "next_episode_to_air": {},
                "networks": {
                    "type": "array"
                },
                "number_of_episodes": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "number_of_seasons": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "origin_country": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "CN"
                    }
                },
                "original_language": {
                    "type": "string",
                    "example": "zh"
                },
                "original_name": {
                    "type": "string",
                    "example": "\u5996\u602a\u4f20"
                },
                "overview": {
                    "type": "string",
                    "example": ""
                },
                "popularity": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "poster_path": {},
                "production_companies": {
                    "type": "array"
                },
                "production_countries": {
                    "type": "array"
                },
                "seasons": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "air_date": {},
                            "episode_count": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 338956,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Season 1"
                            },
                            "overview": {
                                "type": "string",
                                "example": ""
                            },
                            "poster_path": {},
                            "season_number": {
                                "type": "integer",
                                "example": 1,
                                "default": 0
                            }
                        }
                    }
                },
                "spoken_languages": {
                    "type": "array"
                },
                "status": {
                    "type": "string",
                    "example": "Returning Series"
                },
                "tagline": {
                    "type": "string",
                    "example": ""
                },
                "type": {
                    "type": "string",
                    "example": "Scripted"
                },
                "vote_average": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                },
                "vote_count": {
                    "type": "integer",
                    "example": 0,
                    "default": 0
                }
            }
        },
        "response_example": {
            "adult": false,
            "backdrop_path": null,
            "created_by": [],
            "episode_run_time": [],
            "first_air_date": "",
            "genres": [],
            "homepage": "",
            "id": 225491,
            "in_production": true,
            "languages": [],
            "last_air_date": "2023-04-21",
            "last_episode_to_air": {
                "id": 4398801,
                "name": "Episode 8",
                "overview": "",
                "vote_average": 0.0,
                "vote_count": 0,
                "air_date": "2023-04-21",
                "episode_number": 8,
                "production_code": "",
                "runtime": null,
                "season_number": 1,
                "show_id": 225491,
                "still_path": null
            },
            "name": "\u5996\u602a\u4f20",
            "next_episode_to_air": null,
            "networks": [],
            "number_of_episodes": 1,
            "number_of_seasons": 1,
            "origin_country": [
                "CN"
            ],
            "original_language": "zh",
            "original_name": "\u5996\u602a\u4f20",
            "overview": "",
            "popularity": 0.0,
            "poster_path": null,
            "production_companies": [],
            "production_countries": [],
            "seasons": [
                {
                    "air_date": null,
                    "episode_count": 1,
                    "id": 338956,
                    "name": "Season 1",
                    "overview": "",
                    "poster_path": null,
                    "season_number": 1
                }
            ],
            "spoken_languages": [],
            "status": "Returning Series",
            "tagline": "",
            "type": "Scripted",
            "vote_average": 0.0,
            "vote_count": 0
        },
        "code": "import requests\n\ndef get_latest_tv_show():\n    '''\n    Fetches the latest TV show information.\n\n    Returns:\n    - dict: A JSON response containing the latest TV show details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/tv/latest\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the newest TV show ID available. To utilize this API, you can directly call the endpoint /3/tv/latest to retrieve the most recent TV show ID.",
        "functionality": "This API retrieves the latest TV show details by returning the show ID, along with various attributes such as name, status, and last air date."
    },
    {
        "path": "/3/tv/{series_id}/credits",
        "description": "Get the latest season credits of a TV show.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 22970,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 30.6,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg"
                            },
                            "character": {
                                "type": "string",
                                "example": "Tyrion Lannister"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8b219c2956ff6047cd8"
                            },
                            "order": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 1406855,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "name": {
                                "type": "string",
                                "example": "Duncan Muggoch"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Duncan Muggoch"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 1.592,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/ukGjJ62Ejd4cFziald03G34Fsrp.jpg"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5ceab029c3a3682e93217a85"
                            },
                            "department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "job": {
                                "type": "string",
                                "example": "Producer"
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 1399,
                    "default": 0
                }
            }
        },
        "response_example": {
            "cast": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 22970,
                    "known_for_department": "Acting",
                    "name": "Peter Dinklage",
                    "original_name": "Peter Dinklage",
                    "popularity": 30.6,
                    "profile_path": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg",
                    "character": "Tyrion Lannister",
                    "credit_id": "5256c8b219c2956ff6047cd8",
                    "order": 0
                }
            ],
            "crew": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 1406855,
                    "known_for_department": "Production",
                    "name": "Duncan Muggoch",
                    "original_name": "Duncan Muggoch",
                    "popularity": 1.592,
                    "profile_path": "/ukGjJ62Ejd4cFziald03G34Fsrp.jpg",
                    "credit_id": "5ceab029c3a3682e93217a85",
                    "department": "Production",
                    "job": "Producer"
                }
            ],
            "id": 1399
        },
        "code": "import requests\n\ndef get_tv_series_credits(series_id, language=\"en-US\"):\n    '''\n    Fetches the credits for the specified TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series for which to fetch credits. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the credits of the TV series if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the latest season credits of a TV show. To use this API, you need to know the series_id of the TV show. This API should be used after querying the details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves the cast and crew credits for a specific TV show by accepting a series ID and returns detailed information about the cast and crew members associated with that show."
    },
    {
        "path": "/3/tv/{series_id}/keywords",
        "description": "Get a list of keywords that have been added to a TV show.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1399,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "based on novel or book"
                            },
                            "id": {
                                "type": "integer",
                                "example": 818,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 1399,
            "results": [
                {
                    "name": "based on novel or book",
                    "id": 818
                }
            ]
        },
        "code": "import requests\n\ndef get_tv_keywords(series_id):\n    '''\n    Fetches a list of keywords associated with the specified TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series for which to retrieve keywords. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing keywords associated with the TV series if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/keywords\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the list of keywords that have been added to a TV show. To use this API, you need to know the series_id of the TV show. This API should be used after querying the details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves keyword information for a specified TV show by accepting a series ID and returns a list of keywords associated with that show."
    },
    {
        "path": "/3/tv/{series_id}/recommendations",
        "description": "",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/bsNm9z2TJfe0WO3RedPGWQ8mG1X.jpg"
                            },
                            "id": {
                                "type": "integer",
                                "example": 1396,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Breaking Bad"
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Breaking Bad"
                            },
                            "overview": {
                                "type": "string",
                                "example": "When Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime."
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/ggFHVNu6YYI5L9pCfOacjizRGt.jpg"
                            },
                            "media_type": {
                                "type": "string",
                                "example": "tv"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "popularity": {
                                "type": "number",
                                "example": 292.904,
                                "default": 0
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2008-01-20"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.878,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 11544,
                                "default": 0
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "US"
                                }
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 2,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 40,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/bsNm9z2TJfe0WO3RedPGWQ8mG1X.jpg",
                    "id": 1396,
                    "name": "Breaking Bad",
                    "original_language": "en",
                    "original_name": "Breaking Bad",
                    "overview": "When Walter White, a New Mexico chemistry teacher, is diagnosed with Stage III cancer and given a prognosis of only two years left to live. He becomes filled with a sense of fearlessness and an unrelenting desire to secure his family's financial future at any cost as he enters the dangerous world of drugs and crime.",
                    "poster_path": "/ggFHVNu6YYI5L9pCfOacjizRGt.jpg",
                    "media_type": "tv",
                    "genre_ids": [
                        18
                    ],
                    "popularity": 292.904,
                    "first_air_date": "2008-01-20",
                    "vote_average": 8.878,
                    "vote_count": 11544,
                    "origin_country": [
                        "US"
                    ]
                }
            ],
            "total_pages": 2,
            "total_results": 40
        },
        "code": "import requests\n\ndef get_recommendations(series_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of recommended TV shows based on the specified series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series for which to find recommendations. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing recommended TV shows if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/recommendations\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the recommended TV shows based on a specific TV series. To use this API, you need to know the series_id of the TV show for which you want recommendations. This API should be utilized after retrieving details of a TV show using the /3/tv/{series_id} endpoint.",
        "functionality": "This API provides TV show recommendations based on a specified series ID, returning a list of recommended series along with their details such as name, overview, and ratings."
    },
    {
        "path": "/3/tv/{series_id}/reviews",
        "description": "Get the reviews that have been added to a TV show.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1399,
                    "default": 0
                },
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "author": {
                                "type": "string",
                                "example": "lmao7"
                            },
                            "author_details": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "lmao7"
                                    },
                                    "username": {
                                        "type": "string",
                                        "example": "lmao7"
                                    },
                                    "avatar_path": {
                                        "type": "string",
                                        "example": "/ekmYOUU4tfx9zGGadjRdE7UPce.jpg"
                                    },
                                    "rating": {
                                        "type": "integer",
                                        "example": 9,
                                        "default": 0
                                    }
                                }
                            },
                            "content": {
                                "type": "string",
                                "example": "I started watching when it came out as I heard that fans of LOTR also liked this. I stopped watching after Season 1 as I was devastated lol kinda. Only 2015 I decided to continue watching and got addicted like it seemed complicated at first, too many stories and characters. I even used a guide from internet like family tree per house while watching or GOT wiki so I can have more background on the characters. For a TV series, this show can really take you to a different world and never knowing what will happen. It is very daring that any time anybody can just die (I learned not to be attached and have accepted that they will all die so I won't be devastated hehe). I have never read the books but the show is entertaining and you will really root for your faves and really hate on those you hate. \r\n\r\nFantasy, action, drama, comedy, love...and lots of surprises!"
                            },
                            "created_at": {
                                "type": "string",
                                "example": "2017-02-20T05:47:28.872Z"
                            },
                            "id": {
                                "type": "string",
                                "example": "58aa82f09251416f92006a3a"
                            },
                            "updated_at": {
                                "type": "string",
                                "example": "2021-06-23T15:57:54.649Z"
                            },
                            "url": {
                                "type": "string",
                                "example": "https://www.themoviedb.org/review/58aa82f09251416f92006a3a"
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 11,
                    "default": 0
                }
            }
        },
        "response_example": {
            "id": 1399,
            "page": 1,
            "results": [
                {
                    "author": "lmao7",
                    "author_details": {
                        "name": "lmao7",
                        "username": "lmao7",
                        "avatar_path": "/ekmYOUU4tfx9zGGadjRdE7UPce.jpg",
                        "rating": 9.0
                    },
                    "content": "I started watching when it came out as I heard that fans of LOTR also liked this. I stopped watching after Season 1 as I was devastated lol kinda. Only 2015 I decided to continue watching and got addicted like it seemed complicated at first, too many stories and characters. I even used a guide from internet like family tree per house while watching or GOT wiki so I can have more background on the characters. For a TV series, this show can really take you to a different world and never knowing what will happen. It is very daring that any time anybody can just die (I learned not to be attached and have accepted that they will all die so I won't be devastated hehe). I have never read the books but the show is entertaining and you will really root for your faves and really hate on those you hate. \r\n\r\nFantasy, action, drama, comedy, love...and lots of surprises!",
                    "created_at": "2017-02-20T05:47:28.872Z",
                    "id": "58aa82f09251416f92006a3a",
                    "updated_at": "2021-06-23T15:57:54.649Z",
                    "url": "https://www.themoviedb.org/review/58aa82f09251416f92006a3a"
                }
            ],
            "total_pages": 1,
            "total_results": 11
        },
        "code": "import requests\n\ndef get_tv_reviews(series_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of reviews for the specified TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series for which to fetch reviews. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing reviews if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/reviews\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the reviews that have been added to a TV show. To use this API, you need to know the series_id of the TV show. This API should be used after querying the details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves reviews for a specific TV show by accepting a series ID and returns a list of reviews along with details about the author and the review content."
    },
    {
        "path": "/3/tv/{series_id}/similar",
        "description": "Get the similar TV shows.",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "string"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/zcFSvWa34nDn2NcqOPuthyOIBWT.jpg"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 18,
                                    "default": 0
                                }
                            },
                            "id": {
                                "type": "integer",
                                "example": 197063,
                                "default": 0
                            },
                            "origin_country": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "KR"
                                }
                            },
                            "original_language": {
                                "type": "string",
                                "example": "ko"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "\uc885\uc774\ub2ec"
                            },
                            "overview": {
                                "type": "string",
                                "example": "A thriller drama about Yoo I-hwa, a stay-at-home mom living her comfortable and contented life without desires, but to her husband's indifference. While working as a bank contract employee, she unexpectedly touches money from VIP clients and gradually falls into an irreversible collapse."
                            },
                            "popularity": {
                                "type": "number",
                                "example": 12.299,
                                "default": 0
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/xXWynVdMGyJXBUDvIN27AXM3iJJ.jpg"
                            },
                            "first_air_date": {
                                "type": "string",
                                "example": "2023-04-10"
                            },
                            "name": {
                                "type": "string",
                                "example": "Pale Moon"
                            },
                            "vote_average": {
                                "type": "integer",
                                "example": 7,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 82,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1639,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/zcFSvWa34nDn2NcqOPuthyOIBWT.jpg",
                    "genre_ids": [
                        18
                    ],
                    "id": 197063,
                    "origin_country": [
                        "KR"
                    ],
                    "original_language": "ko",
                    "original_name": "\uc885\uc774\ub2ec",
                    "overview": "A thriller drama about Yoo I-hwa, a stay-at-home mom living her comfortable and contented life without desires, but to her husband's indifference. While working as a bank contract employee, she unexpectedly touches money from VIP clients and gradually falls into an irreversible collapse.",
                    "popularity": 12.299,
                    "poster_path": "/xXWynVdMGyJXBUDvIN27AXM3iJJ.jpg",
                    "first_air_date": "2023-04-10",
                    "name": "Pale Moon",
                    "vote_average": 7.0,
                    "vote_count": 2
                }
            ],
            "total_pages": 82,
            "total_results": 1639
        },
        "code": "import requests\n\ndef get_similar_tv_series(series_id, language=\"en-US\", page=1):\n    '''\n    Fetches a list of TV series similar to the specified series.\n\n    Parameters:\n    - series_id (str): The ID of the TV series for which to find similar series. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing similar TV series if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/similar\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the TV shows that are similar to a specific TV show identified by its series_id. To use this API, you need to know the series_id of the TV show you are interested in. This API can be utilized after querying details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves a list of TV shows similar to a specified series by accepting a series ID and returns details such as the show's name, overview, and popularity."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}/credits",
        "description": "",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 22970,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 30.6,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg"
                            },
                            "character": {
                                "type": "string",
                                "example": "Tyrion Lannister"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8b219c2956ff6047cd8"
                            },
                            "order": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 1223796,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "name": {
                                "type": "string",
                                "example": "Frank Doelger"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Frank Doelger"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 0.694,
                                "default": 0
                            },
                            "profile_path": {},
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8c419c2956ff604867c"
                            },
                            "department": {
                                "type": "string",
                                "example": "Production"
                            },
                            "job": {
                                "type": "string",
                                "example": "Producer"
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 3624,
                    "default": 0
                }
            }
        },
        "response_example": {
            "cast": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 22970,
                    "known_for_department": "Acting",
                    "name": "Peter Dinklage",
                    "original_name": "Peter Dinklage",
                    "popularity": 30.6,
                    "profile_path": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg",
                    "character": "Tyrion Lannister",
                    "credit_id": "5256c8b219c2956ff6047cd8",
                    "order": 0
                }
            ],
            "crew": [
                {
                    "adult": false,
                    "gender": 0,
                    "id": 1223796,
                    "known_for_department": "Production",
                    "name": "Frank Doelger",
                    "original_name": "Frank Doelger",
                    "popularity": 0.694,
                    "profile_path": null,
                    "credit_id": "5256c8c419c2956ff604867c",
                    "department": "Production",
                    "job": "Producer"
                }
            ],
            "id": 3624
        },
        "code": "import requests\n\ndef get_season_credits(series_id, season_number, language=\"en-US\"):\n    '''\n    Fetches the credits for a specific season of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number for which to fetch credits. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the season credits if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}/credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the credits of a TV season by providing the series_id and season_number. This API should be used after querying the details of a TV show using /3/tv/{series_id}.",
        "functionality": "This API retrieves the cast and crew credits for a specified TV series season by accepting the series ID and season number, returning detailed information about the actors and production staff involved in that season."
    },
    {
        "path": "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits",
        "description": "",
        "parameters": [
            {
                "name": "series_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "season_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "episode_number",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "cast": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 22970,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Peter Dinklage"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 30.6,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg"
                            },
                            "character": {
                                "type": "string",
                                "example": "Tyrion Lannister"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8b219c2956ff6047cd8"
                            },
                            "order": {
                                "type": "integer",
                                "example": 0,
                                "default": 0
                            }
                        }
                    }
                },
                "crew": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "department": {
                                "type": "string",
                                "example": "Directing"
                            },
                            "job": {
                                "type": "string",
                                "example": "Director"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8a219c2956ff6046e77"
                            },
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 44797,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Directing"
                            },
                            "name": {
                                "type": "string",
                                "example": "Timothy Van Patten"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Timothy Van Patten"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 8.292,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                            }
                        }
                    }
                },
                "guest_stars": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "character": {
                                "type": "string",
                                "example": "Benjen Stark"
                            },
                            "credit_id": {
                                "type": "string",
                                "example": "5256c8b919c2956ff604836a"
                            },
                            "order": {
                                "type": "integer",
                                "example": 62,
                                "default": 0
                            },
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "gender": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "id": {
                                "type": "integer",
                                "example": 119783,
                                "default": 0
                            },
                            "known_for_department": {
                                "type": "string",
                                "example": "Acting"
                            },
                            "name": {
                                "type": "string",
                                "example": "Joseph Mawle"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "Joseph Mawle"
                            },
                            "popularity": {
                                "type": "number",
                                "example": 8.559,
                                "default": 0
                            },
                            "profile_path": {
                                "type": "string",
                                "example": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                            }
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 63056,
                    "default": 0
                }
            }
        },
        "response_example": {
            "cast": [
                {
                    "adult": false,
                    "gender": 2,
                    "id": 22970,
                    "known_for_department": "Acting",
                    "name": "Peter Dinklage",
                    "original_name": "Peter Dinklage",
                    "popularity": 30.6,
                    "profile_path": "/lRsRgnksAhBRXwAB68MFjmTtLrk.jpg",
                    "character": "Tyrion Lannister",
                    "credit_id": "5256c8b219c2956ff6047cd8",
                    "order": 0
                }
            ],
            "crew": [
                {
                    "department": "Directing",
                    "job": "Director",
                    "credit_id": "5256c8a219c2956ff6046e77",
                    "adult": false,
                    "gender": 2,
                    "id": 44797,
                    "known_for_department": "Directing",
                    "name": "Timothy Van Patten",
                    "original_name": "Timothy Van Patten",
                    "popularity": 8.292,
                    "profile_path": "/MzSOFrd99HRdr6pkSRSctk3kBR.jpg"
                }
            ],
            "guest_stars": [
                {
                    "character": "Benjen Stark",
                    "credit_id": "5256c8b919c2956ff604836a",
                    "order": 62,
                    "adult": false,
                    "gender": 2,
                    "id": 119783,
                    "known_for_department": "Acting",
                    "name": "Joseph Mawle",
                    "original_name": "Joseph Mawle",
                    "popularity": 8.559,
                    "profile_path": "/1Ocb9v3h54beGVoJMm4w50UQhLf.jpg"
                }
            ],
            "id": 63056
        },
        "code": "import requests\n\ndef get_episode_credits(series_id, season_number, episode_number, language=\"en-US\"):\n    '''\n    Fetches the credits for a specific episode of a TV series.\n\n    Parameters:\n    - series_id (int): The ID of the TV series. This is a required parameter.\n    - season_number (int): The season number of the episode. This is a required parameter.\n    - episode_number (int): The episode number within the season. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the episode credits if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the credits details of a specific episode within a TV series season. To utilize this API, you need to provide the series_id, season_number, and episode_number. This API should be accessed following the retrieval of TV series details using /3/tv/{series_id} and season details using /3/tv/{series_id}/season/{season_number}.",
        "functionality": "This API retrieves the credits for a specified episode of a TV series by accepting the series ID, season number, and episode number, returning a list of cast, crew, and guest stars associated with that episode."
    },
    {
        "path": "/3/collection/{collection_id}",
        "description": "Get collection details by ID.",
        "parameters": [
            {
                "name": "collection_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 10,
                    "default": 0
                },
                "name": {
                    "type": "string",
                    "example": "Star Wars Collection"
                },
                "overview": {
                    "type": "string",
                    "example": "An epic space-opera theatrical film series, which depicts the adventures of various characters \"a long time ago in a galaxy far, far away\u2026.\""
                },
                "poster_path": {
                    "type": "string",
                    "example": "/r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg"
                },
                "backdrop_path": {
                    "type": "string",
                    "example": "/d8duYyyC9J5T825Hg7grmaabfxQ.jpg"
                },
                "parts": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/2w4xG178RpB4MDAIfTkqAuSJzec.jpg"
                            },
                            "id": {
                                "type": "integer",
                                "example": 11,
                                "default": 0
                            },
                            "title": {
                                "type": "string",
                                "example": "Star Wars"
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_title": {
                                "type": "string",
                                "example": "Star Wars"
                            },
                            "overview": {
                                "type": "string",
                                "example": "Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beautiful princess and restore peace and justice in the Empire."
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/6FfCtAuVAW8XJjZ7eWeLibRLWTw.jpg"
                            },
                            "media_type": {
                                "type": "string",
                                "example": "movie"
                            },
                            "genre_ids": {
                                "type": "array",
                                "items": {
                                    "type": "integer",
                                    "example": 12,
                                    "default": 0
                                }
                            },
                            "popularity": {
                                "type": "number",
                                "example": 100.492,
                                "default": 0
                            },
                            "release_date": {
                                "type": "string",
                                "example": "1977-05-25"
                            },
                            "video": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 8.207,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 18549,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 10,
            "name": "Star Wars Collection",
            "overview": "An epic space-opera theatrical film series, which depicts the adventures of various characters \"a long time ago in a galaxy far, far away\u2026.\"",
            "poster_path": "/r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg",
            "backdrop_path": "/d8duYyyC9J5T825Hg7grmaabfxQ.jpg",
            "parts": [
                {
                    "adult": false,
                    "backdrop_path": "/2w4xG178RpB4MDAIfTkqAuSJzec.jpg",
                    "id": 11,
                    "title": "Star Wars",
                    "original_language": "en",
                    "original_title": "Star Wars",
                    "overview": "Princess Leia is captured and held hostage by the evil Imperial forces in their effort to take over the galactic Empire. Venturesome Luke Skywalker and dashing captain Han Solo team together with the loveable robot duo R2-D2 and C-3PO to rescue the beautiful princess and restore peace and justice in the Empire.",
                    "poster_path": "/6FfCtAuVAW8XJjZ7eWeLibRLWTw.jpg",
                    "media_type": "movie",
                    "genre_ids": [
                        12
                    ],
                    "popularity": 100.492,
                    "release_date": "1977-05-25",
                    "video": false,
                    "vote_average": 8.207,
                    "vote_count": 18549
                }
            ]
        },
        "code": "import requests\n\ndef get_collection_details(collection_id, language=\"en-US\"):\n    '''\n    Fetches details about a specific movie collection.\n\n    Parameters:\n    - collection_id (int): The ID of the collection to retrieve details for. This is a required parameter.\n    - language (str): The language code for the response. Default is \"en-US\".\n\n    Returns:\n    - dict: A JSON response containing the collection details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the details of a collection by its ID. To use this API, you need to have the specific collection_id. This API should be utilized following a search for collections using /3/search/collection.",
        "functionality": "This API retrieves detailed information about a specific collection by accepting a collection ID and returns the collection's name, overview, poster, backdrop images, and its included parts."
    },
    {
        "path": "/3/collection/{collection_id}/images",
        "description": "Get the images that belong to a collection.",
        "parameters": [
            {
                "name": "collection_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            },
            {
                "name": "include_image_language",
                "in": "query",
                "description": "specify a comma separated list of ISO-639-1 values to query, for example: `en,null`",
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 10,
                    "default": 0
                },
                "backdrops": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 1.778,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 1080,
                                "default": 0
                            },
                            "iso_639_1": {},
                            "file_path": {
                                "type": "string",
                                "example": "/d8duYyyC9J5T825Hg7grmaabfxQ.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.464,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 30,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 1920,
                                "default": 0
                            }
                        }
                    }
                },
                "posters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 0.667,
                                "default": 0
                            },
                            "height": {
                                "type": "integer",
                                "example": 3000,
                                "default": 0
                            },
                            "iso_639_1": {
                                "type": "string",
                                "example": "en"
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.516,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 14,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 2000,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 10,
            "backdrops": [
                {
                    "aspect_ratio": 1.778,
                    "height": 1080,
                    "iso_639_1": null,
                    "file_path": "/d8duYyyC9J5T825Hg7grmaabfxQ.jpg",
                    "vote_average": 5.464,
                    "vote_count": 30,
                    "width": 1920
                }
            ],
            "posters": [
                {
                    "aspect_ratio": 0.667,
                    "height": 3000,
                    "iso_639_1": "en",
                    "file_path": "/r8Ph5MYXL04Qzu4QBbq2KjqwtkQ.jpg",
                    "vote_average": 5.516,
                    "vote_count": 14,
                    "width": 2000
                }
            ]
        },
        "code": "import requests\n\ndef get_collection_images(collection_id, include_image_language=None, language=None):\n    '''\n    Fetches images for the specified collection.\n\n    Parameters:\n    - collection_id (int): The ID of the collection for which to fetch images. This is a required parameter.\n    - include_image_language (str): A comma-separated list of ISO-639-1 values to query for image languages.\n    - language (str): The language code for the response.\n\n    Returns:\n    - dict: A JSON response containing the collection images if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/collection/{collection_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare query parameters\n    params = {}\n    if include_image_language:\n        params['include_image_language'] = include_image_language\n    if language:\n        params['language'] = language\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the images that are associated with a collection identified by its collection_id. To utilize this API, you need to have the specific collection_id and can be used following a search for collections using /3/search/collection.",
        "functionality": "This API retrieves images from a specified collection by accepting a collection ID and returns both backdrop and poster images associated with that collection."
    },
    {
        "path": "/3/company/{company_id}",
        "description": "Get the company details by ID.",
        "parameters": [
            {
                "name": "company_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": ""
                },
                "headquarters": {
                    "type": "string",
                    "example": "San Francisco, California"
                },
                "homepage": {
                    "type": "string",
                    "example": "https://www.lucasfilm.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "logo_path": {
                    "type": "string",
                    "example": "/o86DbpburjxrqAzEDhXZcyE8pDb.png"
                },
                "name": {
                    "type": "string",
                    "example": "Lucasfilm Ltd."
                },
                "origin_country": {
                    "type": "string",
                    "example": "US"
                },
                "parent_company": {}
            }
        },
        "response_example": {
            "description": "",
            "headquarters": "San Francisco, California",
            "homepage": "https://www.lucasfilm.com",
            "id": 1,
            "logo_path": "/o86DbpburjxrqAzEDhXZcyE8pDb.png",
            "name": "Lucasfilm Ltd.",
            "origin_country": "US",
            "parent_company": null
        },
        "code": "import requests\n\ndef get_company_details(company_id):\n    '''\n    Fetches details about a specific company using its ID.\n\n    Parameters:\n    - company_id (int): The ID of the company to retrieve details for. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing company details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/company/{company_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the details of a company by its ID. To use this API, you need to know the company_id. This API should be used after searching for companies by their names using /3/search/company.",
        "functionality": "This API retrieves detailed information about a company by accepting a company ID and returns the company's name, description, headquarters, homepage, logo path, origin country, and parent company information."
    },
    {
        "path": "/3/company/{company_id}/images",
        "description": "Get the company logos by id.",
        "parameters": [
            {
                "name": "company_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "logos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 2.97979797979798,
                                "default": 0
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/o86DbpburjxrqAzEDhXZcyE8pDb.png"
                            },
                            "height": {
                                "type": "integer",
                                "example": 99,
                                "default": 0
                            },
                            "id": {
                                "type": "string",
                                "example": "5aa080d6c3a3683fea00011e"
                            },
                            "file_type": {
                                "type": "string",
                                "example": ".svg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.384,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 2,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 295,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 1,
            "logos": [
                {
                    "aspect_ratio": 2.97979797979798,
                    "file_path": "/o86DbpburjxrqAzEDhXZcyE8pDb.png",
                    "height": 99,
                    "id": "5aa080d6c3a3683fea00011e",
                    "file_type": ".svg",
                    "vote_average": 5.384,
                    "vote_count": 2,
                    "width": 295
                }
            ]
        },
        "code": "import requests\n\ndef get_company_images(company_id):\n    '''\n    Fetches images associated with the specified company.\n\n    Parameters:\n    - company_id (int): The ID of the company for which to fetch images. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing company images if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/company/{company_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the logos of a company by its ID. To use this API, you need to know the company_id. This API should be utilized following a search for companies by their names using /3/search/company.",
        "functionality": "This API retrieves company logo images by accepting a company ID and returns a list of logos associated with that company."
    },
    {
        "path": "/3/credit/{credit_id}",
        "description": "Get a movie or TV credit details by ID.",
        "parameters": [
            {
                "name": "credit_id",
                "in": "path",
                "schema": {
                    "type": "string"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "credit_type": {
                    "type": "string",
                    "example": "cast"
                },
                "department": {
                    "type": "string",
                    "example": "Acting"
                },
                "job": {
                    "type": "string",
                    "example": "Actor"
                },
                "media": {
                    "type": "object",
                    "properties": {
                        "adult": {
                            "type": "boolean",
                            "example": false,
                            "default": true
                        },
                        "backdrop_path": {
                            "type": "string",
                            "example": "/uDgy6hyPd82kOHh6I95FLtLnj6p.jpg"
                        },
                        "id": {
                            "type": "integer",
                            "example": 100088,
                            "default": 0
                        },
                        "name": {
                            "type": "string",
                            "example": "The Last of Us"
                        },
                        "original_language": {
                            "type": "string",
                            "example": "en"
                        },
                        "original_name": {
                            "type": "string",
                            "example": "The Last of Us"
                        },
                        "overview": {
                            "type": "string",
                            "example": "Zwanzig Jahre nachdem die moderne Zivilisation zerst\u00f6rt wurde. \u2013 Joel, ein abgeh\u00e4rteter \u00dcberlebender, wird angeheuert, um Ellie, ein 14-j\u00e4hriges M\u00e4dchen, aus einer bedr\u00fcckenden Quarant\u00e4nezone zu schmuggeln. Was als kleiner Job beginnt, wird bald zu einer brutalen, herzzerrei\u00dfenden Reise, bei der die beiden die USA durchqueren m\u00fcssen und aufeinander angewiesen sind, um zu \u00fcberleben."
                        },
                        "poster_path": {
                            "type": "string",
                            "example": "/igwIPNClQpGVzb61QlGqcpT5zUy.jpg"
                        },
                        "media_type": {
                            "type": "string",
                            "example": "tv"
                        },
                        "genre_ids": {
                            "type": "array",
                            "items": {
                                "type": "integer",
                                "example": 18,
                                "default": 0
                            }
                        },
                        "popularity": {
                            "type": "number",
                            "example": 898.378,
                            "default": 0
                        },
                        "first_air_date": {
                            "type": "string",
                            "example": "2023-01-15"
                        },
                        "vote_average": {
                            "type": "number",
                            "example": 8.749,
                            "default": 0
                        },
                        "vote_count": {
                            "type": "integer",
                            "example": 3341,
                            "default": 0
                        },
                        "origin_country": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "US"
                            }
                        },
                        "character": {
                            "type": "string",
                            "example": "Joel Miller"
                        },
                        "episodes": {
                            "type": "array"
                        },
                        "seasons": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "air_date": {
                                        "type": "string",
                                        "example": "2023-01-15"
                                    },
                                    "episode_count": {
                                        "type": "integer",
                                        "example": 9,
                                        "default": 0
                                    },
                                    "id": {
                                        "type": "integer",
                                        "example": 144593,
                                        "default": 0
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "Staffel 1"
                                    },
                                    "overview": {
                                        "type": "string",
                                        "example": "Die 1. Staffel der Endzeit-Horrorserie The Last of Us feierte ihre Premiere am 15. Januar 2023 bei HBO. In Staffel 1 beginnt f\u00fcr den \u00dcberlebenden Joel und das M\u00e4dchen Ellie eine Reise durch das postapokalyptische Amerika, in dem Pl\u00fcnderer und mutierte Wesen ihnen nach dem Leben trachten."
                                    },
                                    "poster_path": {
                                        "type": "string",
                                        "example": "/aUQKIpZZ31KWbpdHMCmaV76u78T.jpg"
                                    },
                                    "season_number": {
                                        "type": "integer",
                                        "example": 1,
                                        "default": 0
                                    },
                                    "show_id": {
                                        "type": "integer",
                                        "example": 100088,
                                        "default": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "media_type": {
                    "type": "string",
                    "example": "tv"
                },
                "id": {
                    "type": "string",
                    "example": "6024a814c0ae36003d59cc3c"
                },
                "person": {
                    "type": "object",
                    "properties": {
                        "adult": {
                            "type": "boolean",
                            "example": false,
                            "default": true
                        },
                        "id": {
                            "type": "integer",
                            "example": 1253360,
                            "default": 0
                        },
                        "name": {
                            "type": "string",
                            "example": "Pedro Pascal"
                        },
                        "original_name": {
                            "type": "string",
                            "example": "Pedro Pascal"
                        },
                        "media_type": {
                            "type": "string",
                            "example": "person"
                        },
                        "popularity": {
                            "type": "number",
                            "example": 106.095,
                            "default": 0
                        },
                        "gender": {
                            "type": "integer",
                            "example": 2,
                            "default": 0
                        },
                        "known_for_department": {
                            "type": "string",
                            "example": "Acting"
                        },
                        "profile_path": {
                            "type": "string",
                            "example": "/dBOrm29cr7NUrjiDQMTtrTyDpfy.jpg"
                        }
                    }
                }
            }
        },
        "response_example": {
            "credit_type": "cast",
            "department": "Acting",
            "job": "Actor",
            "media": {
                "adult": false,
                "backdrop_path": "/uDgy6hyPd82kOHh6I95FLtLnj6p.jpg",
                "id": 100088,
                "name": "The Last of Us",
                "original_language": "en",
                "original_name": "The Last of Us",
                "overview": "Zwanzig Jahre nachdem die moderne Zivilisation zerst\u00f6rt wurde. \u2013 Joel, ein abgeh\u00e4rteter \u00dcberlebender, wird angeheuert, um Ellie, ein 14-j\u00e4hriges M\u00e4dchen, aus einer bedr\u00fcckenden Quarant\u00e4nezone zu schmuggeln. Was als kleiner Job beginnt, wird bald zu einer brutalen, herzzerrei\u00dfenden Reise, bei der die beiden die USA durchqueren m\u00fcssen und aufeinander angewiesen sind, um zu \u00fcberleben.",
                "poster_path": "/igwIPNClQpGVzb61QlGqcpT5zUy.jpg",
                "media_type": "tv",
                "genre_ids": [
                    18
                ],
                "popularity": 898.378,
                "first_air_date": "2023-01-15",
                "vote_average": 8.749,
                "vote_count": 3341,
                "origin_country": [
                    "US"
                ],
                "character": "Joel Miller",
                "episodes": [],
                "seasons": [
                    {
                        "air_date": "2023-01-15",
                        "episode_count": 9,
                        "id": 144593,
                        "name": "Staffel 1",
                        "overview": "Die 1. Staffel der Endzeit-Horrorserie The Last of Us feierte ihre Premiere am 15. Januar 2023 bei HBO. In Staffel 1 beginnt f\u00fcr den \u00dcberlebenden Joel und das M\u00e4dchen Ellie eine Reise durch das postapokalyptische Amerika, in dem Pl\u00fcnderer und mutierte Wesen ihnen nach dem Leben trachten.",
                        "poster_path": "/aUQKIpZZ31KWbpdHMCmaV76u78T.jpg",
                        "season_number": 1,
                        "show_id": 100088
                    }
                ]
            },
            "media_type": "tv",
            "id": "6024a814c0ae36003d59cc3c",
            "person": {
                "adult": false,
                "id": 1253360,
                "name": "Pedro Pascal",
                "original_name": "Pedro Pascal",
                "media_type": "person",
                "popularity": 106.095,
                "gender": 2,
                "known_for_department": "Acting",
                "profile_path": "/dBOrm29cr7NUrjiDQMTtrTyDpfy.jpg"
            }
        },
        "code": "import requests\n\ndef get_credit_details(credit_id):\n    '''\n    Fetches details about a specific credit using its ID.\n\n    Parameters:\n    - credit_id (str): The ID of the credit to retrieve details for. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing credit details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/credit/{credit_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the details of a movie or TV credit by providing the credit_id. This API is useful for retrieving specific credit information related to movies or TV shows. It should be used after obtaining the credit_id through other relevant APIs such as /3/movie/{movie_id}/credits or /3/person/{person_id}/movie_credits.",
        "functionality": "This API retrieves detailed information about a specific movie or TV credit by accepting a credit ID and returns the credit type, job, associated media, and the person linked to the credit."
    },
    {
        "path": "/3/genre/movie/list",
        "description": "Get the list of official genres for movies.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 28,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Action"
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "genres": [
                {
                    "id": 28,
                    "name": "Action"
                }
            ]
        },
        "code": "import requests\n\ndef get_movie_genres(language=\"en\"):\n    '''\n    Fetches a list of movie genres available in the specified language.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en\".\n\n    Returns:\n    - dict: A JSON response containing the list of movie genres if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/genre/movie/list\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the list of official genres specifically for movies. This API is useful for retrieving genre information related to movies. To utilize this API effectively, you can access it directly without the need for any prior search or identification steps.",
        "functionality": "This API provides a list of official movie genres by accepting an optional language parameter and returning an array of genres with their respective IDs and names."
    },
    {
        "path": "/3/genre/tv/list",
        "description": "Get the list of official genres for TV shows.",
        "parameters": [
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 10759,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "Action & Adventure"
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "genres": [
                {
                    "id": 10759,
                    "name": "Action & Adventure"
                }
            ]
        },
        "code": "import requests\n\ndef get_tv_genres(language=\"en\"):\n    '''\n    Fetches a list of TV genres available in the specified language.\n\n    Parameters:\n    - language (str): The language code for the response. Default is \"en\".\n\n    Returns:\n    - dict: A JSON response containing the list of TV genres if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/genre/tv/list\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"language\": language})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the list of official genres available for TV shows. This API provides information about the genres that can be associated with TV shows. It can be used to retrieve genre details for TV shows and enhance the categorization of TV content.",
        "functionality": "This API retrieves the official genres for TV shows by accepting an optional language parameter and returns a list of genre objects with their respective IDs and names."
    },
    {
        "path": "/3/network/{network_id}",
        "description": "",
        "parameters": [
            {
                "name": "network_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "headquarters": {
                    "type": "string",
                    "example": "New York City, New York"
                },
                "homepage": {
                    "type": "string",
                    "example": "https://www.hbo.com"
                },
                "id": {
                    "type": "integer",
                    "example": 49,
                    "default": 0
                },
                "logo_path": {
                    "type": "string",
                    "example": "/tuomPhY2UtuPTqqFnKMVHvSb724.png"
                },
                "name": {
                    "type": "string",
                    "example": "HBO"
                },
                "origin_country": {
                    "type": "string",
                    "example": "US"
                }
            }
        },
        "response_example": {
            "headquarters": "New York City, New York",
            "homepage": "https://www.hbo.com",
            "id": 49,
            "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
            "name": "HBO",
            "origin_country": "US"
        },
        "code": "import requests\n\ndef get_network_details(network_id):\n    '''\n    Fetches details about a specific network.\n\n    Parameters:\n    - network_id (int): The ID of the network to retrieve details for. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing network details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/network/{network_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the details of a TV network by its ID. This API allows you to retrieve information about a specific TV network. To use this API effectively, you need to know the network_id beforehand, which can be obtained through other API calls or external sources.",
        "functionality": "This API retrieves detailed information about a specific network by accepting a network ID and returns data including the network's name, homepage, headquarters, logo path, and country of origin."
    },
    {
        "path": "/3/network/{network_id}/images",
        "description": "Get the TV network logos by id.",
        "parameters": [
            {
                "name": "network_id",
                "in": "path",
                "schema": {
                    "type": "integer",
                    "format": "int32"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 49,
                    "default": 0
                },
                "logos": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "aspect_ratio": {
                                "type": "number",
                                "example": 2.425287356321839,
                                "default": 0
                            },
                            "file_path": {
                                "type": "string",
                                "example": "/tuomPhY2UtuPTqqFnKMVHvSb724.png"
                            },
                            "height": {
                                "type": "integer",
                                "example": 174,
                                "default": 0
                            },
                            "id": {
                                "type": "string",
                                "example": "5a7a67a40e0a26020a000091"
                            },
                            "file_type": {
                                "type": "string",
                                "example": ".svg"
                            },
                            "vote_average": {
                                "type": "number",
                                "example": 5.318,
                                "default": 0
                            },
                            "vote_count": {
                                "type": "integer",
                                "example": 3,
                                "default": 0
                            },
                            "width": {
                                "type": "integer",
                                "example": 422,
                                "default": 0
                            }
                        }
                    }
                }
            }
        },
        "response_example": {
            "id": 49,
            "logos": [
                {
                    "aspect_ratio": 2.425287356321839,
                    "file_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
                    "height": 174,
                    "id": "5a7a67a40e0a26020a000091",
                    "file_type": ".svg",
                    "vote_average": 5.318,
                    "vote_count": 3,
                    "width": 422
                }
            ]
        },
        "code": "import requests\n\ndef get_network_images(network_id):\n    '''\n    Fetches images associated with the specified network.\n\n    Parameters:\n    - network_id (int): The ID of the network for which to retrieve images. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing network images if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/network/{network_id}/images\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Get the TV network logos by id. To use this API, you need to know the network_id. This API is useful for retrieving the logos of TV networks.",
        "functionality": "This API retrieves the logos of a specified TV network by accepting a network ID and returns a list of logos associated with that network."
    },
    {
        "path": "/3/review/{review_id}",
        "description": "Retrieve the details of a movie or TV show review.",
        "parameters": [
            {
                "name": "review_id",
                "in": "path",
                "schema": {
                    "type": "string"
                },
                "required": true
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "640b2aeecaaca20079decdcc"
                },
                "author": {
                    "type": "string",
                    "example": "Ricardo Oliveira"
                },
                "author_details": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "example": "Ricardo Oliveira"
                        },
                        "username": {
                            "type": "string",
                            "example": "RSOliveira"
                        },
                        "avatar_path": {
                            "type": "string",
                            "example": "/23Cl7rhsknc7IIAcZZAGKzovjTu.jpg"
                        },
                        "rating": {
                            "type": "integer",
                            "example": 9,
                            "default": 0
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "example": "\"The Last of Us\" is a post-apocalyptic TV series based on the popular video game of the same name. The story follows the journey of Joel, a smuggler, and Ellie, a teenage girl who may be the key to finding a cure for a deadly fungal infection that has ravaged the world.\r\n\r\nThe series features outstanding performances from Pedro Pascal as Joel, Bella Ramsey as Ellie, and Anna Torv as Tess. The chemistry between the main characters is excellent, and the casting is spot-on.\r\n\r\nThe show's writing is superb, and it captures the essence of the video game while adding a fresh perspective. The narrative is engaging, and the pacing is just right, with each episode leaving you on the edge of your seat, eager to see what happens next.\r\n\r\nThe show's production value is top-notch, with stunning visuals and cinematography that capture the bleak and haunting atmosphere of a post-apocalyptic world. The use of practical effects and makeup is impressive and adds to the overall immersion of the story.\r\n\r\nOverall, \"The Last of Us\" is an outstanding TV series that does justice to the source material. It's a must-watch for fans of the video game and anyone who enjoys gripping and emotional storytelling. I would rate it a 9 out of 10.\r\n\r\n \r\n\r\nWritten and Reviewed by RSOliveira"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-03-10T13:04:46.674Z"
                },
                "iso_639_1": {
                    "type": "string",
                    "example": "en"
                },
                "media_id": {
                    "type": "integer",
                    "example": 100088,
                    "default": 0
                },
                "media_title": {
                    "type": "string",
                    "example": "The Last of Us"
                },
                "media_type": {
                    "type": "string",
                    "example": "tv"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-03-10T13:04:46.734Z"
                },
                "url": {
                    "type": "string",
                    "example": "https://www.themoviedb.org/review/640b2aeecaaca20079decdcc"
                }
            }
        },
        "response_example": {
            "id": "640b2aeecaaca20079decdcc",
            "author": "Ricardo Oliveira",
            "author_details": {
                "name": "Ricardo Oliveira",
                "username": "RSOliveira",
                "avatar_path": "/23Cl7rhsknc7IIAcZZAGKzovjTu.jpg",
                "rating": 9.0
            },
            "content": "\"The Last of Us\" is a post-apocalyptic TV series based on the popular video game of the same name. The story follows the journey of Joel, a smuggler, and Ellie, a teenage girl who may be the key to finding a cure for a deadly fungal infection that has ravaged the world.\r\n\r\nThe series features outstanding performances from Pedro Pascal as Joel, Bella Ramsey as Ellie, and Anna Torv as Tess. The chemistry between the main characters is excellent, and the casting is spot-on.\r\n\r\nThe show's writing is superb, and it captures the essence of the video game while adding a fresh perspective. The narrative is engaging, and the pacing is just right, with each episode leaving you on the edge of your seat, eager to see what happens next.\r\n\r\nThe show's production value is top-notch, with stunning visuals and cinematography that capture the bleak and haunting atmosphere of a post-apocalyptic world. The use of practical effects and makeup is impressive and adds to the overall immersion of the story.\r\n\r\nOverall, \"The Last of Us\" is an outstanding TV series that does justice to the source material. It's a must-watch for fans of the video game and anyone who enjoys gripping and emotional storytelling. I would rate it a 9 out of 10.\r\n\r\n \r\n\r\nWritten and Reviewed by RSOliveira",
            "created_at": "2023-03-10T13:04:46.674Z",
            "iso_639_1": "en",
            "media_id": 100088,
            "media_title": "The Last of Us",
            "media_type": "tv",
            "updated_at": "2023-03-10T13:04:46.734Z",
            "url": "https://www.themoviedb.org/review/640b2aeecaaca20079decdcc"
        },
        "code": "import requests\n\ndef get_review_by_id(review_id):\n    '''\n    Fetches the review details for the specified review ID.\n\n    Parameters:\n    - review_id (str): The ID of the review to fetch. This is a required parameter.\n\n    Returns:\n    - dict: A JSON response containing the review details if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = f\"https://api.themoviedb.org/3/review/{review_id}\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Retrieve the details of a movie or TV show review by providing the review_id. This API is useful for accessing specific reviews related to movies or TV shows. It can be utilized after searching for movies or TV shows using other relevant APIs.",
        "functionality": "This API retrieves the details of a specific movie or TV show review by accepting a review ID and returns the review content along with the author's information and associated media details."
    },
    {
        "path": "/3/search/company",
        "description": "Search for companies by their original and alternative names.",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": 3268,
                                "default": 0
                            },
                            "logo_path": {
                                "type": "string",
                                "example": "/tuomPhY2UtuPTqqFnKMVHvSb724.png"
                            },
                            "name": {
                                "type": "string",
                                "example": "HBO"
                            },
                            "origin_country": {
                                "type": "string",
                                "example": "US"
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 2,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 22,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "id": 3268,
                    "logo_path": "/tuomPhY2UtuPTqqFnKMVHvSb724.png",
                    "name": "HBO",
                    "origin_country": "US"
                }
            ],
            "total_pages": 2,
            "total_results": 22
        },
        "code": "import requests\n\ndef search_company(query, page=1):\n    '''\n    Searches for companies based on the provided query.\n\n    Parameters:\n    - query (str): The search term to find companies. This is a required parameter.\n    - page (int): The page number for pagination. Default is 1.\n\n    Returns:\n    - dict: A JSON response containing the search results if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/search/company\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params={\"query\": query, \"page\": page})\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Search for companies by their original and alternative names. This API allows you to find companies based on their names. To use this API effectively, you should provide the search query containing the company name you are looking for.",
        "functionality": "This API allows users to search for companies by providing a query term and returns a list of companies, including their IDs, names, logo paths, and origin countries."
    },
    {
        "path": "/3/search/collection",
        "description": "Search for collections by their original, translated and alternative names.",
        "parameters": [
            {
                "name": "query",
                "in": "query",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            {
                "name": "include_adult",
                "in": "query",
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            {
                "name": "language",
                "in": "query",
                "schema": {
                    "type": "string",
                    "default": "en-US"
                }
            },
            {
                "name": "page",
                "in": "query",
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "default": 1
                }
            },
            {
                "name": "region",
                "in": "query",
                "schema": {
                    "type": "string"
                }
            }
        ],
        "schema": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "adult": {
                                "type": "boolean",
                                "example": false,
                                "default": true
                            },
                            "backdrop_path": {
                                "type": "string",
                                "example": "/zuW6fOiusv4X9nnW3paHGfXcSll.jpg"
                            },
                            "id": {
                                "type": "integer",
                                "example": 86311,
                                "default": 0
                            },
                            "name": {
                                "type": "string",
                                "example": "The Avengers Collection"
                            },
                            "original_language": {
                                "type": "string",
                                "example": "en"
                            },
                            "original_name": {
                                "type": "string",
                                "example": "The Avengers Collection"
                            },
                            "overview": {
                                "type": "string",
                                "example": "A superhero film series produced by Marvel Studios based on the Marvel Comics superhero team of the same name, and part of the Marvel Cinematic Universe (MCU).  The series features an ensemble cast from the Marvel Cinematic Universe series films, as they join forces for the peacekeeping organization S.H.I.E.L.D. led by Nick Fury."
                            },
                            "poster_path": {
                                "type": "string",
                                "example": "/yFSIUVTCvgYrpalUktulvk3Gi5Y.jpg"
                            }
                        }
                    }
                },
                "total_pages": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                },
                "total_results": {
                    "type": "integer",
                    "example": 1,
                    "default": 0
                }
            }
        },
        "response_example": {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/zuW6fOiusv4X9nnW3paHGfXcSll.jpg",
                    "id": 86311,
                    "name": "The Avengers Collection",
                    "original_language": "en",
                    "original_name": "The Avengers Collection",
                    "overview": "A superhero film series produced by Marvel Studios based on the Marvel Comics superhero team of the same name, and part of the Marvel Cinematic Universe (MCU).  The series features an ensemble cast from the Marvel Cinematic Universe series films, as they join forces for the peacekeeping organization S.H.I.E.L.D. led by Nick Fury.",
                    "poster_path": "/yFSIUVTCvgYrpalUktulvk3Gi5Y.jpg"
                }
            ],
            "total_pages": 1,
            "total_results": 1
        },
        "code": "import requests\n\ndef search_collection(query, include_adult=False, language=\"en-US\", page=1, region=None):\n    '''\n    Searches for collections based on the specified query.\n\n    Parameters:\n    - query (str): The search query for the collection. This is a required parameter.\n    - include_adult (bool): Whether to include adult content in the search results. Default is False.\n    - language (str): The language code for the response. Default is \"en-US\".\n    - page (int): The page number for pagination. Default is 1.\n    - region (str): The region code for the search results. This is an optional parameter.\n\n    Returns:\n    - dict: A JSON response containing the search results if the request is successful.\n    - None: If the request fails or an error occurs.\n    '''\n    url = \"https://api.themoviedb.org/3/search/collection\"\n    headers = {\n        \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3YzAwOGVmMzM3NGJjOWU1NzY5ZDM0NDdlODRmZTk2NiIsIm5iZiI6MTcyNDA1Mjk4OS42MTIwNzksInN1YiI6IjY2M2M4Y2FiMDRlNGI5YjRjZDdmYmVkNiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.RSQEZ6FRNzrhgkrFEElXy4hbD4ylu9zHPW0YtfTPoEI\"\n    }\n    # Prepare the parameters for the request\n    params = {\n        \"query\": query,\n        \"include_adult\": include_adult,\n        \"language\": language,\n        \"page\": page,\n        \"region\": region\n    }\n    \n    # Remove the region parameter if it is None\n    if region is None:\n        params.pop(\"region\")\n\n    # Make the API request\n    try:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()  # Raise an error for bad responses\n        return response.json()  # Return the JSON response if successful\n    except requests.RequestException:\n        return None  # Return None if there is an error",
        "usage": "Search for collections by their original, translated, and alternative names. This API allows you to find collections based on different naming variations. To utilize this API effectively, you should provide the necessary search criteria related to collections.",
        "functionality": "This API searches for collections using a query string and returns a list of collections that match the search criteria along with their details, including names, languages, and overviews."
    }
]